   _                               _            _    _ 
\_|_)                             | |          | |  | |
  |     __   __,  , _|_  __,   ,  | |          | |  | |
 _|    /  \_/  | / \_|  /  |  / \_|/ \       _ |/ _ |/ 
(/\___/\__/ \_/|/ \/ |_/\_/|_/ \/ |   |_/    \_/\/\_/\/
              /|                                       
              \|                                       
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
输入配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
输入配置块是 CONF 配置文件内必要的配置块, 主要用于定义业务日志数据的来源
输入配置块能够内嵌标准输入 stdin {}/ 日志文件 file {}/ 消息队列 kafka {}/ 缓存数据库 redis {} 在内的常用插件
输入配置块的相应文档见 https://www.elastic.co:

    •  stdin {}                                  [                .../guide/en/logstash/6.8/plugins-inputs-stdin.html ]
    •  file {}                                   [                 .../guide/en/logstash/6.8/plugins-inputs-file.html ]
    •  kafka {}                                  [                .../guide/en/logstash/6.8/plugins-inputs-kafka.html ]
    •  redis {}                                  [                .../guide/en/logstash/6.8/plugins-inputs-redis.html ]

输入配置块的标准输入插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ add_field => {}                                │ Hash    │ 向消息事件内添加若干用户自定义的字段
│ id => ""                                       │ String  │ 向消息事件内添加一个固定名称字段
│ type => ""                                     │ String  │ 向消息事件内添加一个固定名称字段
│ codec => "line"                                │ Codec   │ 默认使用数据行作为单位, 从输入配置块内读取消息事件内
│ enable_metric => true                          │ Boolean │ 启用度量记录的功能特性
│ tags => []                                     │ Array   │ 向消息事件内添加若干标记
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

""""""""" 演示输入配置块内标准输入插件的使用办法
[root ~]# /usr/share/logstash/bin/logstash -e "                                                                       \
input {                                                                                                               \
    stdin {                                                                                                           \
        add_field => {                                                                                                \
            \"foo\" => \"season\"                                                                                     \
        }                                                                                                             \
        id => \"000000\"                                                                                              \
        type => \"demo\"                                                                                              \
        codec => \"line\"                                                                                             \
        tags => [\"spring\", \"summer\", \"autumn\", \"winter\"]                                                      \
    }                                                                                                                 \
}                                                                                                                     \
output {                                                                                                              \
    stdout {}                                                                                                         \
}"                                                                                                                    \
--------------------------------------------------------------------------------------------------------------------- ✻

输入配置块的消息队列插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ auto_commit_interval_ms => "5000"              │ String  │ 插件默认每 5000ms 从上游队列取一次业务日志数据
│ bootstrap_servers => "localhost:9092"          │ String  │ 插件默认用 localhost:9092 作为上游队列的服务套接字
│ consumer_threads => 1                          │ Number  │ 插件默认用 1 个线程从上游队列消费业务日志数据 (匹配主题的分区数量)
│ group_id => "logstash"                         │ String  │ 插件默认用 logstash 作为上游队列的消费者标识
│ topics => ["logstash"]                         │ Array   │ 插件默认消费上游队列中的 logstash 主题内的数据
│ codec => "line"                                │ Codec   │ 插件默认用数据行作为单位, 从上游队列内读取消息事件内
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

""""""""" 演示输入配置块内消息队列插件的使用办法
[root ~]# cat /etc/logstash/conf.d/foo.conf
input {
    kafka {
        bootstrap_servers => "kafka-0.season.com:9092,kafka-1.season.com:9092,kafka-2.season.com:9092"
        group_id          => "logstash"
        consumer_threads  => 3
        topics            => ["season-application-log"]
        codec             => "json"
    }
}
... ...
... ...
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
过滤配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
过滤配置块是 CONF 配置文件内可选的配置块, 主要用于处理业务日志数据的一些特征和指标
过滤配置块能够内嵌日期时间 date {}/ DNS/ 事件解析 grok {}/ JSON/ Ruby/ CSV/ XML/ 字段合并 mutate {} 等常用插件
过滤配置块的相应文档见 https://www.elastic.co:

    •  date {}                                   [                .../guide/en/logstash/6.8/plugins-filters-date.html ]
    •  dns {}                                    [                 .../guide/en/logstash/6.8/plugins-filters-dns.html ]
    •  grok {}                                   [                .../guide/en/logstash/6.8/plugins-filters-grok.html ]
    •  http {}                                   [                .../guide/en/logstash/6.8/plugins-filters-http.html ]
    •  json {}                                   [                .../guide/en/logstash/6.8/plugins-filters-json.html ]
    •  ruby {}                                   [                .../guide/en/logstash/6.8/plugins-filters-ruby.html ]
    •  csv {}                                    [                 .../guide/en/logstash/6.8/plugins-filters-csv.html ]
    •  xml {}                                    [                 .../guide/en/logstash/6.8/plugins-filters-xml.html ]
    •  mutate {}                                 [              .../guide/en/logstash/6.8/plugins-filters-mutate.html ]

过滤配置块的事件解析插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ match => {}                                    │ Hash    │ 编写消息事件的匹配规则, 左键为被匹配的字段, 右值为匹配正则
│ overwrite => []                                │ Array   │ 配置消息事件的匹配规则是否允许复用已有字段
│ tag_on_failure => ["_grokparsefailure"]        │ Array   │ 若发生数据匹配失败, 默认向消息事件内添加标记 "_grokparsefailure"
│ tag_on_timeout => "_groktimeout"               │ String  │ 若发生数据匹配超时, 默认向消息事件内添加标记 "_groktimeout"
│ timeout_millis => 30000                        │ Number  │ 匹配消息事件内任意字段数据的默认超时时间为 300 毫秒
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

阅读上述表格时, 还请注意:

    •  grok.match 配置项有三种惯用写法:
       grok.match => {"KEY" => ["PATTERN1", "PATTERN2", ...]}                                                     [ 1 ]
       grok.match => {"KEY" => "(?<NAME>PATTERN)"}                                                                [ 2 ]
       grok.match => {"KEY" => "%{CODE:NAME}"}                                                                    [ 3 ]
    [ 1 ] 单个左键配置多个正则表达式, 多个正则表达式根据索引编号依次匹配字段的值, 直至出现第一个匹配成功的正则表达式
    [ 2 ] 使用 (?<NAME>PATTERN) 的固定格式, 允许在匹配规则 PATTERN 的同时, 把匹配命中部分赋予字段 NAME 并追加到消息事件
    [ 3 ] 使用 %{CODE:NAME} 的固定格式引用预置的匹配规则 CODE, 并把相应匹配结果赋予字段 NAME 并追加到消息事件

使用 grok.match 配置项编写消息事件的匹配规则时, 可以直接引用下述预置规则
┌───────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────┐
│ Code                  │ Pattern                                                                                     │
├───────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│ YEAR                  │ (?>\d\d){1,2}                                                                               │
│ MONTHNUM              │ (?:0?[1-9]|1[0-2])                                                                          │
│ MONTHDAY              │ (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])                                                │
│ HOUR                  │ (?:2[0123]|[01]?[0-9])                                                                      │
│ MINUTE                │ (?:[0-5][0-9])                                                                              │
│ SECOND                │ (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)                                                      │
│ TIME                  │ (?!<[0-9])%{HOUR}:%{MINUTE}(?::%{SECOND})(?![0-9])                                          │
│ ISO8601_TIMEZONE      │ (?:Z|[+-]%{HOUR}(?::?%{MINUTE}))                                                            │
│ TIMESTAMP_ISO8601     │ %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?   │
│ USERNAME              │ [a-zA-Z0-9._-]+                                                                             │
│ HOSTNAME              │ \b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)         │
│ EMAILLOCALPART        │ [a-zA-Z0-9!#$%&'*+\-/=?^_`{|}~]{1,64}(?:\.[a-zA-Z0-9!#$%&'*+\-/=?^_`{|}~]{1,62}){0,63}      │
│ EMAILADDRESS          │ %{EMAILLOCALPART}@%{HOSTNAME}                                                               │
│ INT                   │ (?:[+-]?(?:[0-9]+))                                                                         │
│ BASE10NUM             │ (?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))                              │
│ NUMBER                │ (?:%{BASE10NUM})                                                                            │
│ WORD                  │ \b\w+\b                                                                                     │
│ SPACE                 │ \s*                                                                                         │
│ DATA                  │ .*?                                                                                         │
│ UUID                  │ [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}                                        │
│ CISCOMAC              │ (?:(?:[A-Fa-f0-9]{4}\.){2}[A-Fa-f0-9]{4})                                                   │
│ WINDOWSMAC            │ (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2})                                                    │
│ COMMONMAC             │ (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})                                                    │
│ MAC                   │ (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC})                                                  │
│ UNIXPATH              │ (/[[[:alnum:]]_%!$@:.,+~-]*)+                                                               │
│ WINPATH               │ (?>[A-Za-z]+:|\\)(?:\\[^\\?*]*)+                                                            │
│ PATH                  │ (?:%{UNIXPATH}|%{WINPATH})                                                                  │
│ URIPATH               │ (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%&_\-]*)+                                                    │
│ LOGLEVEL              │                                                                                             │
├───────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────┤
│ https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/ecs-v1/grok-pattern                   │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

过滤配置块的日期时间插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ match => []                                    │ Array   │ 插件默认使用数组的第一个字段匹配其余字段, 命中相应匹配结果
│ target => "@timestamp"                         │ String  │ 插件默认使用 match 配置项的命中结果替换掉 @timestamp 字段的值
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

阅读上述表格时, 还请注意:

    •  事件解析插件能够解析业务日志数据内自带的时间戳
    •  日期时间插件能够匹配业务日志数据内自带的时间戳, 并替换掉 @timestamp 字段的值, 使得业务日志数据保持自身逻辑顺序

过滤配置块的字段合并插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ add_field => {}                                │ Hash    │ 向消息事件内添加若干用户自定义的字段
│ remove_field => []                             │ Hash    │ 从消息事件内删除若干字段
│ id => ""                                       │ String  │ 向消息事件内添加一个固定名称字段
│ enable_metric => true                          │ Boolean │ 启用度量记录的功能特性
│ add_tag => []                                  │ Array   │ 向消息事件内添加若干标记
│ remove_tag => []                               │ Array   │ 从消息事件内删除若干标记
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
输出配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
输出配置块是 CONF 配置文件内必要的配置块, 主要用于定义业务日志数据的输出对象
输出配置块能够内嵌标准输出 stdout {}/ 日志文件 file {}/ 消息队列 kafka {}/ 索引数据库 elasticsearch {} 在内的常用插件
输出配置块的相应文档见 https://www.elastic.co:

    •  stdout {}                                 [              .../guide/en/logstash/6.8/plugins-outputs-stdout.html ]
    •  file {}                                   [                .../guide/en/logstash/6.8/plugins-outputs-file.html ]
    •  kafka {}                                  [               .../guide/en/logstash/6.8/plugins-outputs-kafka.html ]
    •  elasticsearch {}                          [       .../guide/en/logstash/6.8/plugins-outputs-elasticsearch.html ]

输出配置块的标准输出插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ id => ""                                       │ String  │ 向消息事件内添加一个固定名称字段
│ codec => "rubydebug"                           │ Codec   │ 默认使用 rubydebug 作为消息事件的输出风格
│ enable_metric => true                          │ Boolean │ 启用度量记录的功能特性
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

过滤配置块的索引数据库插件支持下述配置项
┌────────────────────────────────────────────────┬─────────┬───────────────────────────────────────────────────────────
│ hosts => ["127.0.0.1:9200"]                    │ Arrary  │ 插件默认用 127.0.0.1:9200 作为下游索引数据库的服务套接字
│ index => "logstash-%{+YYYY.MM.dd}"             │ String  │ 插件默认用 logstash-%{+YYYY.MM.dd} 作为消息事件的索引
│ pool_max => 1000                               │ Number  │ 插件默认允许打开最多 1000 个连接
│ pool_max_per_route => 100                      │ Number  │ 插件和下游索引数据库之间, 默认允许打开最多 100 个连接
│ timeout => 60                                  │ Number  │ 插件和下游索引数据库之间, 默认的请求超时时间为 60 秒
└────────────────────────────────────────────────┴─────────┴───────────────────────────────────────────────────────────

""""""""" 演示输出配置块内索引数据库插件的使用办法
[root ~]# cat /etc/logstash/conf.d/foo.conf
... ...
... ...
output {
    elasticsearch {
        hosts => [
            "elastic-0.season.com:9200",
            "elastic-1.season.com:9200",
            "elastic-2.season.com:9200"
        ]
        index => "season-application-log-%{+YYYY-MM}"
        pool_max => 1800
        pool_max_per_route => 600
        timeout => 300
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



