 , __                               _  
/|/  \                             | | 
 |___/ ,_    __ _|_  __   __   __  | | 
 |    /  |  /  \_|  /  \_/    /  \_|/  
 |       |_/\__/ |_/\__/ \___/\__/ |__/
                                       
                                       
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2PC
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2PC 官方翻译为二阶段提交协议 (2 Phase Commit)
2PC 把分布式集群的事务提交过程切分为请求事务/ 提交事务 (回滚事务) 在内的两个顺序阶段, 2PC 被用作关系型数据库处理分布式事务
2PC 把分布式集群的节点区分为协调者 (Coordinator)/ 参与者 (Participant): 协调者统一调度参与者的执行逻辑, 并决定参与者是否提交事务
2PC 的详细内容说明如下:

    阶段一: 请求事务
    ─────────────────────────────────────────────
    1. 协调者向每个参与者发送事务内容, 询问参与者是否有条件能够提交事务
    2. 参与者执行事务并产生出重做数据 (redo data)/ 回退数据 (undo data) 写入事务日志文件
    3. 参与者向协调者反馈事务执行结果 (分为事务执行成功的响应与事务执行失败的响应)

    阶段二: 完成事务 [每个参与者的事务执行成功]
    ─────────────────────────────────────────────
    1. 协调者向每个参与者发送事务提交请求
    2. 参与者提交事务
    3. 参与者反馈事务提交结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务提交

    阶段二: 回滚事务 [任意参与者的事务执行失败]
    ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
    1. 协调者向每个参与者发送事务回滚请求
    2. 参与者使用回退数据回滚事务
    3. 参与者反馈事务回滚结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务回滚



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3PC
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3PC 官方翻译为三阶段提交协议 (3 Phase Commit)
3PC 把分布式集群的事务提交过程切分为提交请求事务/ 预提交事务 (中断事务)/ 提交事务 (回滚事务) 在内的三个顺序阶段
3PC 把分布式集群的节点区分为协调者 (Coordinator)/ 参与者 (Participant): 协调者统一调度参与者的执行逻辑, 并决定参与者是否提交事务
3PC 的详细内容说明如下:

    阶段一: 请求事务
    ─────────────────────────────────────────────
    1. 协调者向每个参与者发送事务内容, 询问参与者是否有条件能够提交事务
    2. 参与者评估自身是否有条件能够提交事务
    3. 参与者向协调者反馈自身的条件评估结果

    阶段二: 预提交事务 [每个参与者的评估结果为成功]
    ─────────────────────────────────────────────
    1. 协调者向每个参与者发送预提交请求, 协调者自身则进入准备状态
    2. 参与者执行事务并产生出重做数据 (redo data)/ 回退数据 (undo data) 写入事务日志文件
    3. 参与者向协调者反馈事务执行结果 (分为事务执行成功的响应与事务执行失败的响应)

    阶段二: 中断事务 [任意参与者的评估结果为失败]
    ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
    1. 协调者向每个参与者发送事务中断请求
    2. 参与者中断事务 (参与者在等待协调者消息超时之后, 会自行中断事务)

    阶段三: 提交事务 [每个参与者的事务执行成功]
    ─────────────────────────────────────────────
    1. 协调者向每个参与者发送事务提交请求, 协调者自身则进入提交状态
    2. 参与者提交事务
    3. 参与者反馈事务提交结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务提交

    阶段三: 回滚事务 [任意参与者的事务执行失败]
    ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
    1. 协调者向每个参与者发送事务回滚请求
    2. 参与者使用回退数据回滚事务
    3. 参与者反馈事务回滚结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务回滚



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Paxos
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Paxos 旧金山的计算机科学家兰伯特 (Leslie Lamport) 设计的 Paxos 协议, 协议名称取自古希腊传说中的岛屿
Paxos 在分布式集群内, 允许 2n + 1 个服务节点中的 n 个服务节点宕机
Paxos 把分布式集群的服务节点分为下述不同角色:

    •  提议者 ( Proposer ) 发起包含有提案编号 (Proposal ID)/ 提案内容 (Proposal Value) 的提案
    •  决策者 ( Acceptor ) 决定是否接受提案, 若提案被分布式集群中过半的决策者接受, 则提案被整个分布式集群批准生效
    •  学习者 ( Learner  ) 学习已被分布式集群批准生效的提案

┌──────────────────────────────────────────────────────────┬──────────────────────────────────────────────────────────┐
│                         Proposer                         │                         Acceptor                         │
├──────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────┤
│                                                          │                                                          │
│   1. Choose a bigger number N for new proposal           │                                                          │
│   2. Broadcast Prepare(N) to some acceptors    ╌╌╌╌╌╌╌╌╌╌╌╌▶︎ 3. Response to Prepare(N):                             │
│                                                          │       •  if N > MinProposal then                         │
│                                                          │       •      MinProposal = N;                            │
│   4. When reponse received from majority:      ◀︎╌╌╌╌╌╌╌╌╌╌╌╌     •  return(AcceptProposal, AcceptValue);            │
│       •  if any AcceptValue in reponse then              │                                                          │
│       •      replace AcceptValue                         │                                                          │
│       •      with highest AcceptProposal;                │                                                          │
│   5. Broadcast Accept(N, Value) to all servers ╌╌╌╌╌╌╌╌╌╌╌╌▶︎ 6. Response to Accept(N, Value):                       │
│                                                          │       •  if N >= MinProposal then                        │
│                                                          │       •      AcceptProposal = MinProposal = N;           │
│                                                          │       •      AcceptValue = Value;                        │
│   7. When reponse received from majority:      ◀︎╌╌╌╌╌╌╌╌╌╌╌╌     •  return(MinProposal);                            │
│       •  if any rejection (Result > N) then              │                                                          │
│       •      Goto(1);                                    │                                                          │
│       •  else                                            │                                                          │
│       •      Value is chosen;                            │                                                          │
│                                                          │                                                          │
└──────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────┘

阅读上述伪代码时, 还请注意:

    1. 提议者使用时间戳拼接自增数字的方式, 确定一个提案编号 N
    2. 提议者向部分决策者广播编号为 N 的提案决议的决策准备请求 Prepare(N)
    3. 决策者在接收到 Prepare(N) 的时候:
           •  如果编号 N 大于 MinProposal 则设置 MinProposal 为 N 值, 同时拒绝 N 值小于 MinProposal 的提案决议准备请求
           •  返回



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Raft
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZAB
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZAB 官方翻译为原子消息广播协议 (ZooKeeper Atomic Broadcast), 专用于 ZooKeeper 软件的分布式一致性协议



