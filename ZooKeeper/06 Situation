                                           
  () o                     o               
  /\   _|_         __, _|_     __   _  _   
 /  \|  |  |   |  /  |  |  |  /  \_/ |/ |  
/(__/|_/|_/ \_/|_/\_/|_/|_/|_/\__/   |  |_/
                                           
                                           
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
服务注册
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                      (1)     ┊    ┌─────────────┐  ┌─────────────┐  ┌─────────────┐    ┊     (2)
                ┌╌╌╌╌╌╌╌╌╌╌╌╌>┊    │ zookeeper-0 │  │ zookeeper-1 │  │ zookeeper-2 │    ┊<╌╌╌╌╌╌╌╌╌╌╌╌┐
                ┊             ┊    └─────────────┘  └─────────────┘  └─────────────┘    ┊             ┊
                ┊             ┊                                                         ┊             ┊
                ┊             ┊    [ business ] <<<<<<<<<<<<<<<<<<<<<<<<<<<< root       ┊             ┊
                ┊             ┊      └─── [ com.foo.demo ] <<<<<<<<<<<<<<<<< service    ┊             ┊
                ┊             ┊             ├─── [ provider ] <<<<<<<<<<<<<< type       ┊             ┊
                ┊             ┊             │      ├─── [ business_A0 ] <<<< node       ┊             ┊
                ┊             ┊             │      ├─── [ business_A1 ]                 ┊             ┊
                ┊             ┊             │      └─── [ business_A2 ]                 ┊             ┊
                ┊             ┊             └─── [ consumer ]                           ┊             ┊
                ┊             ┊                    ├─── [ business_B0 ]                 ┊             ┊
                ┊             ┊                    ├─── [ business_B1 ]                 ┊             ┊
                ┊             ┊                    └─── [ business_B2 ]                 ┊             ┊
                ┊             ┊                                                         ┊             ┊
                ┊             └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘             ┊
                ┊                                                                                     ┊
                ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐                 ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
                ┊                ┊                ┊                 ┊                ┊                ┊
         ┌──────┴──────┐  ┌──────┴──────┐  ┌──────┴──────┐   ┌──────┴──────┐  ┌──────┴──────┐  ┌──────┴──────┐
         │ business_A0 │  │ business_A1 │  │ business_A2 │   │ business_B0 │  │ business_B1 │  │ business_B2 │
         └─────────────┘  └─────────────┘  └─────────────┘   └──────┬──────┘  └──────┬──────┘  └──────┬──────┘
                                 △                △                 │                │                │
                                 │                │                 │                │                │
                                 │                └─────────────────│────────────────┴────────────────┘
                                 └──────────────────────────────────┘     (3)
                                                                          ─────────────────────────────────────────────
                                                                          •  基于 Watcher 监视机制形成发布订阅的协作效果

阅读上述图例时, 还请注意:

    (1)  服务节点 business_A0/1/2 把自身服务注册到 ZooKeeper 软件集群, 形成可供应用节点订阅的服务列表
    (2)  应用节点 business_B0/1/2 基于 ZooKeeper 软件集群订阅服务
    (3)  应用节点 business_B0/1/2 按照 ZooKeeper 软件集群提供的订阅结果, 向对应服务节点发起连接请求
    (4)  应用节点 business_B0/1/2 订阅的服务信息发生变化时, ZooKeeper 软件集群会基于 Watcher 监视机制主动通知应用节点更新订阅信息



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
统一命名
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                              ┊    [ business ]                                         ┊
                              ┊      └─── [ com.foo.demo ]                              ┊
                              ┊             ├─── [ foo_0 ]                              ┊
                              ┊             │      ├─── [ name_000000 ]                 ┊
                              ┊             │      ├─── [ name_000001 ]                 ┊
                              ┊             │      └─── [ name_000002 ]                 ┊
                              ┊             └─── [ foo_1 ]                              ┊
                              ┊                    ├─── [ name_000000 ]                 ┊
                              ┊                    ├─── [ name_000001 ]                 ┊
                              ┊                    └─── [ name_000002 ]                 ┊
                              ┊                                                         ┊
                              └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

阅读上述图例时, 还请注意:

    (1)  使用数据节点划分出不同的命名空间, 不同命名空间下的数据节点可以同名
    (2)  使用数据节点拼接出业务的 UUID:
         •  /business/com.foo.demo/foo_0/name_000000  -->  business-com.foo.demo-foo_0-name_000000
         •  /business/com.foo.demo/foo_1/name_000000  -->  business-com.foo.demo-foo_1-name_000000



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
协调分布式集群
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    •  注册任务/ 选举分布式集群的管理者
    •  登记任务的中间状态
    •  汇总任务的工作进度
    •  管理分布式集群的配置数据
    •  检测心跳

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                              ┊    [ business ]                                         ┊
                              ┊      └─── [ com.foo.demo ]                              ┊
                              ┊             └─── [ mission ]                            ┊
                              ┊                    └─── [ mission_000000 ] <──────────────────────────┐
                              ┊                           └─── [ running ] <──────────────────────────────┐
                              ┊                                                         ┊             │   │
                              └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘             │   │
                                                                                                      │   │
                                                    ┌─────────────┐                               (2) │   │
                                                    │ business_A0 ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤   │
                                                    └─────────────┘                               (1) │   │
                                                    ┌─────────────┬───────────────────────────────────┤   │
                                                    │ business_A1 │                               (3) ┊   │
                                                    └─────────────┴───────────────────────────────────────┘
                                                    ┌─────────────┐                               (2) ┊
                                                    │ business_A2 ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘
                                                    └─────────────┘

阅读上述图例时, 还请注意:

    (1)  应用节点 business_A1    注册数据节点 /business/com.foo.demo/mission/mission_000000 成功, 允许执行对应任务
    (2)  应用节点 business_A0/A2 注册数据节点 /business/com.foo.demo/mission/mission_000000 失败, 无法执行对应任务
    (3)  应用节点 business_A1    注册数据节点 /business/com.foo.demo/mission/mission_000000/running, 登记任务的中间状态
         ────────────────────────────────────────────────────────────
         抢注数据节点的过程可用于选举分布式集群的管理者: 成功抢注指定数据节点的应用节点成为分布式集群的管理者

汇总任务的工作进度:

    应用节点 business_A0/A2/A3 可以在固定命名空间下注册不同的数据节点, 并由此汇报任务的工作进度
    分布式集群的管理者 business_MA 直接读取对应数据节点, 汇总任务的工作进度
    •  /business/com.foo.demo/mission/business_A0:data
    •  /business/com.foo.demo/mission/business_A1:data
    •  /business/com.foo.demo/mission/business_A2:data

检测心跳:

    分布式集群架构中, 应用节点相互之间可以使用 PingTong/ TCP 长连接检测心跳
    如果引入 ZooKeeper 软件协调分布式集群, 多个应用节点可以在指定命名空间下注册不同的临时节点, 并启动 Watcher 监视机制
    数据节点发生数据变动 (临时节点增加/ 减少), 那么 ZooKeeper 软件会主动向应用节点推送数据变动, 协助分布式集群实现弹性扩缩容



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件在其他项目中的实际应用
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HBase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HBase (Hadoop Database) 是基于 Hadoop 文件系统且面向高性能/ 高可用设计的分布式存储系统, 针对数据写入操作具有强一致性
HBase 使用 ZooKeeper 软件协调自身的分布式集群:

    •  HBase 服务冗错
       HBase 分布式集群的每个区域应用节点 (Region Server) 都会在启动时向 ZooKeeper 软件创建临时节点 /hbase/rs/${HOSTNAME}
       HBase 分布式集群的管理者基于 Watcher 监视机制及时接收 /hbase/rs 目录下临时节点的变动, 由此完成区域应用节点的弹性扩缩容
    •  HBase 管理配置数据
       HBase 分布式集群选择把配置数据寄存在 ZooKeeper 软件 (例如: Root Region --> /hbase/root-region-server)
       HBase 分布式集群的应用客户端统一访问 ZooKeeper 软件以获取准确的配置数据
    •  HBase 协调工作任务
       HBase 分布式集群
    •

Kafka
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Dubbo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


JStorm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


