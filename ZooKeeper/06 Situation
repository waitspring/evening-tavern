                                           
  () o                     o               
  /\   _|_         __, _|_     __   _  _   
 /  \|  |  |   |  /  |  |  |  /  \_/ |/ |  
/(__/|_/|_/ \_/|_/\_/|_/|_/|_/\__/   |  |_/
                                           
                                           
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
服务注册
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                      (1)     ┊    ┌─────────────┐  ┌─────────────┐  ┌─────────────┐    ┊     (2)
                ┌╌╌╌╌╌╌╌╌╌╌╌╌>┊    │ zookeeper-0 │  │ zookeeper-1 │  │ zookeeper-2 │    ┊<╌╌╌╌╌╌╌╌╌╌╌╌┐
                ┊             ┊    └─────────────┘  └─────────────┘  └─────────────┘    ┊             ┊
                ┊             ┊                                                         ┊             ┊
                ┊             ┊    [ business ] <<<<<<<<<<<<<<<<<<<<<<<<<<<< root       ┊             ┊
                ┊             ┊      └─── [ com.foo.demo ] <<<<<<<<<<<<<<<<< service    ┊             ┊
                ┊             ┊             ├─── [ provider ] <<<<<<<<<<<<<< type       ┊             ┊
                ┊             ┊             │      ├─── [ business_A0 ] <<<< node       ┊             ┊
                ┊             ┊             │      ├─── [ business_A1 ]                 ┊             ┊
                ┊             ┊             │      └─── [ business_A2 ]                 ┊             ┊
                ┊             ┊             └─── [ consumer ]                           ┊             ┊
                ┊             ┊                    ├─── [ business_B0 ]                 ┊             ┊
                ┊             ┊                    ├─── [ business_B1 ]                 ┊             ┊
                ┊             ┊                    └─── [ business_B2 ]                 ┊             ┊
                ┊             ┊                                                         ┊             ┊
                ┊             └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘             ┊
                ┊                                                                                     ┊
                ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐                 ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
                ┊                ┊                ┊                 ┊                ┊                ┊
         ┌──────┴──────┐  ┌──────┴──────┐  ┌──────┴──────┐   ┌──────┴──────┐  ┌──────┴──────┐  ┌──────┴──────┐
         │ business_A0 │  │ business_A1 │  │ business_A2 │   │ business_B0 │  │ business_B1 │  │ business_B2 │
         └─────────────┘  └─────────────┘  └─────────────┘   └──────┬──────┘  └──────┬──────┘  └──────┬──────┘
                                 △                △                 │                │                │
                                 │                │                 │                │                │
                                 │                └─────────────────│────────────────┴────────────────┘
                                 └──────────────────────────────────┘     (3)
                                                                          ─────────────────────────────────────────────
                                                                          •  基于 Watcher 监视机制形成发布订阅的协作效果

阅读上述图例时, 还请注意:

    (1)  服务节点 business_A0/1/2 把自身服务注册到 ZooKeeper 软件集群, 形成可供应用节点订阅的服务列表
    (2)  应用节点 business_B0/1/2 基于 ZooKeeper 软件集群订阅服务
    (3)  应用节点 business_B0/1/2 按照 ZooKeeper 软件集群提供的订阅结果, 向对应服务节点发起连接请求
    (4)  应用节点 business_B0/1/2 订阅的服务信息发生变化时, ZooKeeper 软件集群会基于 Watcher 监视机制主动通知应用节点更新订阅信息



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
统一命名
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                              ┊    [ business ]                                         ┊
                              ┊      └─── [ com.foo.demo ]                              ┊
                              ┊             ├─── [ foo_0 ]                              ┊
                              ┊             │      ├─── [ name_000000 ]                 ┊
                              ┊             │      ├─── [ name_000001 ]                 ┊
                              ┊             │      └─── [ name_000002 ]                 ┊
                              ┊             └─── [ foo_1 ]                              ┊
                              ┊                    ├─── [ name_000000 ]                 ┊
                              ┊                    ├─── [ name_000001 ]                 ┊
                              ┊                    └─── [ name_000002 ]                 ┊
                              ┊                                                         ┊
                              └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

阅读上述图例时, 还请注意:

    (1)  使用数据节点划分出不同的命名空间, 不同命名空间下的数据节点可以同名
    (2)  使用数据节点拼接出业务的 UUID:
         •  /business/com.foo.demo/foo_0/name_000000  -->  business-com.foo.demo-foo_0-name_000000
         •  /business/com.foo.demo/foo_1/name_000000  -->  business-com.foo.demo-foo_1-name_000000



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
协调分布式集群
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    •  注册任务/ 选举分布式集群的管理者
    •  登记任务的中间状态
    •  汇总任务的工作进度
    •  管理分布式集群的配置数据
    •  检测心跳

                              ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                              ┊                                                         ┊
                              ┊    [ business ]                                         ┊
                              ┊      └─── [ com.foo.demo ]                              ┊
                              ┊             └─── [ mission ]                            ┊
                              ┊                    └─── [ mission_000000 ] <──────────────────────────┐
                              ┊                           └─── [ running ] <──────────────────────────────┐
                              ┊                                                         ┊             │   │
                              └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘             │   │
                                                                                                      │   │
                                                    ┌─────────────┐                               (2) │   │
                                                    │ business_A0 ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤   │
                                                    └─────────────┘                               (1) │   │
                                                    ┌─────────────┬───────────────────────────────────┤   │
                                                    │ business_A1 │                               (3) ┊   │
                                                    └─────────────┴───────────────────────────────────────┘
                                                    ┌─────────────┐                               (2) ┊
                                                    │ business_A2 ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘
                                                    └─────────────┘

阅读上述图例时, 还请注意:

    (1)  应用节点 business_A1    注册数据节点 /business/com.foo.demo/mission/mission_000000 成功, 允许执行对应任务
    (2)  应用节点 business_A0/A2 注册数据节点 /business/com.foo.demo/mission/mission_000000 失败, 无法执行对应任务
    (3)  应用节点 business_A1    注册数据节点 /business/com.foo.demo/mission/mission_000000/running, 登记任务的中间状态
         ────────────────────────────────────────────────────────────
         抢注数据节点的过程可用于选举分布式集群的管理者: 成功抢注指定数据节点的应用节点成为分布式集群的管理者

汇总任务的工作进度:

    应用节点 business_A0/A2/A3 可以在固定命名空间下注册不同的数据节点, 并由此汇报任务的工作进度
    分布式集群的管理者 business_MA 直接读取对应数据节点, 汇总任务的工作进度
    •  /business/com.foo.demo/mission/business_A0:data
    •  /business/com.foo.demo/mission/business_A1:data
    •  /business/com.foo.demo/mission/business_A2:data

检测心跳:

    分布式集群架构中, 应用节点相互之间可以使用 PingTong, TCP 长连接检测心跳
    如果引入 ZooKeeper 软件协调分布式集群, 多个应用节点可以在指定命名空间下注册不同的临时节点, 并启动 Watcher 监视机制
    数据节点发生数据变动 (临时节点增加, 减少), 那么 ZooKeeper 软件会主动向应用节点推送数据变动, 协助分布式集群实现弹性扩缩容



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件在其他项目中的实际应用
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HBase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HBase (Hadoop Database) 是基于 Hadoop 文件系统且面向高性能, 高可用设计的分布式存储系统, 针对数据写入操作具有强一致性
HBase 使用 ZooKeeper 软件协调自身的分布式集群:

    •  服务冗错
       HBase 的应用节点 (Region Server) 在启动时会基于 ZK_DATABASE 创建临时数据节点 /hbase/rs/${HOSTNAME}
       HBase 的分布式集群管理者基于 Watcher 监视机制监测 /hbase/rs/${HOSTNAME} 的变动, 由此完成区域应用节点的弹性扩缩容
    •  管理配置数据
       HBase 的配置数据统一寄存在 ZK_DATABASE, 例如: Root Region 元数据寄存在 /hbase/root-region-server 数据节点
       HBase 的应用客户端统一访问 ZK_DATABASE 获取准确的配置数据
    •  管理副本文件
       HBase 的副本文件元数据统一寄存在 ZK_DATABASE 的 /hbase/replication/${REPLICATION} 数据节点, 由此形成断点记录
       HBase 的副本节点出现宕机需要恢复数据时, 可以根据断点记录定位数据恢复起点

Kafka
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Kafka 是互联网生态中最常见的消息发布订阅软件, 通常用作收集业务日志的中间管道
Kafka 使用 ZooKeeper 软件协调自身的分布式集群:

    •  选举管理者
       Kafka 的应用节点会在启动时基于 ZK_DATABASE 抢注 /kafka/controller 临时节点, 抢注成功的应用节点成为分布式集群的主节点
       Kafka 的从节点基于 Watcher 监视机制监测 /kafka/controller 的变动, 如果主节点出现掉线, 从节点会发起抢注并由此再次选举主节点
    •  注册消息发布者, 消息订阅者, 消息主题
       Kafka 的消息发布者在启动时会把自己的元数据注册为 /kafka/brokers/ids/${ID} 临时节点
       Kafka 的消息订阅者在启动时会把自己的元数据注册为 /kafka/consumers/${GROUPNAME}/ids/${ID} 临时节点
       Kafka 的消息发布者和订阅者在启动时会把自己需要的消息主题注册到 /kafka/brokers/topics/${TOPIC} 数据节点
    •  管理配置数据, 副本文件
       Kafka 的配置数据, 副本文件统一寄存在 ZK_DATABASE 的 /kafka/config 数据节点
    •  负载均衡
       Kafka 的消息发布者, 消息订阅者, 消息主题全部注册为 ZK_DATABASE 的数据节点
       Kafka 的消息订阅者能够基于 ZK_DATABASE 提供的信息寻址到负载较低的消息发布者并建立连接, 由此形成业务层面的负载均衡

Dubbo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dubbo 是基于 Java 语言编写的分布式服务编程框架
Dubbo 使用 ZooKeeper 软件作为编程框架的服务注册中心:

    •  /dubbo
       /dubbo 数据节点是 Dubbo 注册到 ZK_DATABASE 的根数据节点
    •  /dubbo/com.foo.demo
       /dubbo/com.foo.demo 数据节点是 Dubbo 注册到 ZK_DATABASE 的服务数据节点, 标记一项 Dubbo 业务服务
    •  /dubbo/com.foo.demo/providers
       /dubbo/com.foo.demo/providers 数据节点是 Dubbo 服务提供者的根节点, 其下属的临时节点代表一个服务提供者
    •  /dubbo/com.foo.demo/consumers
       /dubbo/com.foo.demo/consumers 数据节点是 Dubbo 服务消费者的根节点, 其下属的临时节点代表一个服务消费者
    •  服务治理: Dubbo 的监控中心组件基于 Watcher 监视机制监测 /dubbo/com.foo.demo 的变动, 由此完成分布式集群中的微服务治理

JStorm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JStorm 是使用 Java 语言基于 Storm 二次开发得到的分布式实时计算引擎, 能够调度微服务的各种任务
JStorm 由中央调度器 (Nimbus), 守护者 (Supervisor), 任务容器 (Worker), 任务 (Task) 在内的组件节点构成
JStorm 使用 ZooKeeper 软件协调自身的分布式集群:

    •  选举中央调度器
       JStorm 的应用节点会在启动时基于 ZK_DATABASE 抢注 /jstrom/nimbus_master 临时节点, 抢注成功的应用节点成为中央调度器
    •  检测心跳
       JStorm 的守护者与任务会在 ZK_DATABASE 注册 /jstorm/supervisors 数据节点与 /jstorm/tasks 数据节点
       JStorm 的中央调度器基于 Watcher 监视机制监测选择需要心跳检测的守护者与任务对象



