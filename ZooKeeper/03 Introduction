   _                                                            
  | |                         |                 o               
  | | _  _  _|_  ,_    __   __|          __ _|_     __   _  _   
_ |/ / |/ |  |  /  |  /  \_/  |  |   |  /    |  |  /  \_/ |/ |  
\_/\/  |  |_/|_/   |_/\__/ \_/|_/ \_/|_/\___/|_/|_/\__/   |  |_/
                                                                
                                                                
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的数据结构
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的数据结构类似于 Linux 文件系统中的目录树结构:

    •  树状结构中的每个条目都被称作为一个数据节点 (znode), 每个数据节点都存储有数据内容, 并使用若干元数据键值对描述节点状态
    •  数据节点能够使用路径定位, 例如基于 /kafka/config/topics/__consumer_offsets 路径能够准确定位相应数据节点
    •  持久节点 (persistent) 是指仅允许使用控制台删除的数据节点
    •  临时节点 (ephemeral) 是指业务端关闭与 ZooKeeper 软件的连接时, 自动被 ZooKeeper 软件删除的数据节点
    •  持久有序节点 (persistent_sequential), 使用有序数字修饰路径的持久节点, 例如 /com.foo.demo/persistent-{0|1|2} 持久节点
    •  临时有序节点 (ephemeral_sequential), 使用有序数字修饰路径的临时节点, 例如 /com.foo.demo/ephemeral-{0|1|2} 临时节点

    ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
    ┊                                                                                                             ┊
    ┊    [ / ]                                                                                                    ┊
    ┊      │                                                                                                      ┊
    ┊      ├─── [ /zookeeper ]                                                                                    ┊
    ┊      │      │                                                                                               ┊
    ┊      │      ├─── [ /config ]                                                                                ┊
    ┊      │      └─── [ /quota ]                                                                                 ┊
    ┊      └─── [ /kafka ]                                                                                        ┊
    ┊             │                                                                                               ┊
    ┊             ├─── [ /cluster ]                                                                               ┊
    ┊             ├─── [ /controller_epoch ]                                                                      ┊
    ┊             ├─── [ /controller ]                                                                            ┊
    ┊             ├─── [ /brokers ]                                                                               ┊
    ┊             ├─── [ /admin ]                                                                                 ┊
    ┊             ├─── [ /isr_change_notification ]                                                               ┊
    ┊             ├─── [ /consumers ]                                                                             ┊
    ┊             ├─── [ /log_dir_event_notification ]                                                            ┊
    ┊             ├─── [ /lastest_producer_id_block ]                                                             ┊
    ┊             └─── [ /config ]                                                                                ┊
    ┊                                                                                                             ┊
    └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

ZooKeeper 软件的数据节点使用下述元数据键值对描述节点状态
┌───────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────────
│ cZxid                 │ 数据节点被创建时相应的事务编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ ctime                 │ 数据节点被创建时的具体时间点
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ mZxid                 │ 数据节点最新一次被更新时相应的事务编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ mtime                 │ 数据节点最新一次被更新时的具体时间点
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ pZxid                 │ 数据节点下属的子数据节点, 其最新一次被更新时相应的事务编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ cversion              │ 数据节点下属的子数据节点的版本编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ dataVersion           │ 数据节点登记的数据内容的版本编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ aclVersion            │ 数据节点内访问控制列表的版本编号
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ ephemeralOwner        │ 数据节点是一个临时节点时, 登记创建该临时节点的用户会话编号 (数据节点是持久节点时, 用户会话编号固定为 0 值)
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ dataLength            │ 数据内容的长度
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ numChildren           │ 数据节点下属的子数据节点的数量
├───────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ version               │ 数据节点的版本编号
└───────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────────



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的数据存储
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的数据存储分指内存数据存储/ 磁盘数据存储在内的两个部分
ZooKeeper 软件首先是一个内存数据库, 使用树状结构把事务数据寄存在内存资源中并提供给业务软件使用, 此时软件必须面对一个现实问题:

    软件不可避免的需要在某些情境下重启, 那么如何保障软件重启之后能够把事务恢复到最近时间点 ???
    ╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

ZooKeeper 软件使用二进制格式的数据快照文件定期存储某个时刻的全量内存数据, 数据快照文件则用于事务恢复
ZooKeeper 软件使用配置参数 snapCount 设置数据快照文件的拍摄频率:

    ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
    ┊                                                                                                             ┊
    ┊    randomCount = Random(snapCount / 2 - 1, snapCount);                                                      ┊
    ┊    if randomCount ≤ Count ≤ snapCount then                                                                  ┊
    ┊        Take a snapshot;                                                                                     ┊
    ┊                                                                                                             ┊
    └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

阅读上述伪代码时, 还请注意:

    •  配置参数 snapCount 的默认值为 10000, 字面意思为软件在写入 10000 次事务数据时, 拍摄数据快照文件
    •  分布式集群中的服务实例错峰制作数据快照文件, 当事务数据的写入次数达到 snapCount 参数值的某过半随机数时, 便会拍摄数据快照文件
    •  分布式集群触发崩溃恢复时, 其下属服务实例同样会拍摄数据快照文件

ZooKeeper 软件制作数据快照文件的过程如下:

    1. 软件根据配置参数 snapCount 选择某过半随机数, 检测事务数据的写入次数直至达成数据快照文件的拍摄条件
    2. 软件滚动事务日志文件
    3. 软件创建异步线程用于拍摄数据快照文件 (使用数据结构中最大的 ZXID 作为文件名后缀)

""""""""" 查看数据快照文件
[root ~]# ls -l /var/zookeeper/data/version-2/snapshot.*
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:20 snapshot.0
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:25 snapshot.100000000
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:30 snapshot.200000000
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:35 snapshot.300000000
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:40 snapshot.400000000
-rw-r--r-- 1 zookeeper zookeeper  598  7 2 19:45 snapshot.500000000
--------------------------------------------------------------------------------------------------------------------- ✻

    ┌─────────────────────┐       ┌─────────────────┐     ┌───────────────────────┐
    │ init FileTxnSnapLog ├─────> │ init ZKDatabase ├───> │ init PlayBackListener ├───────────────────────────────────┐
    └─────────────────────┘       └─────────────────┘     └───────────────────────┘                                   │
                                                                                                                      │
    ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐     │
    ┊ deal snapshot                                                                                             ┊     │
    ┊                                                                                                           ┊     │
    ┊    ┌───────────────┐       ┌──────────────────┐     ┌────────────────────────────┐                        ┊     │
┌────────┤ find max ZXID │ <─────┤ analyze snapshot │ <───┤ obtain latest 100 snapshot │ <────────────────────────────┘
│   ┊    └───────────────┘       └──────────────────┤     └────────────────────────────┘                        ┊
│   ┊                                               │                                                           ┊
│   └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌ (error) │╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘
│                                                   │
│                                ┌──────┐           │
│                                │ exit │ <─────────┘
│                                └──────┘
│
│   ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
│   ┊ deal transaction                                                                                          ┊
│   ┊                                                                                                           ┊
│   ┊    ┌──────────────────────────────────────────┐     ┌─────────────────────┐     ┌────────────────────┐    ┊
└──────> │ obtain transaction smaller than max ZXID ├───> │ execute transaction ├───> │ return latest ZXID ├──────────┐
    ┊    └──────────────────────────────────────────┘     └─────────────────────┘     └────────────────────┘    ┊     │
    ┊                                                                                                           ┊     │
    └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘     │
                                                                                                                      │
    ┌─────────────┐                                                                                                   │
    │ check EPOCH │ <─────────────────────────────────────────────────────────────────────────────────────────────────┘
    └─────────────┘
                                                 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                                                                                                     RECOVERY DATA STEP

阅读上述图例时, 还请注意:

    •  FileTxnSnapLog   是软件的事务日志和数据快照文件的访问层
    •  ZKDatabase       是软件的内存数据库, 初始状态下的内存数据库使用树状结构描述 /zookeeper/quota 在内的数据节点
    •  PlayBackListener 是软件的服务监听器, 能够接收事务应用过程中的回调消息
    •  软件处理数据快照文件时, 将一次性获取最多 100 份数据快照文件, 但仅解析最新的数据快照文件以获取最大的 ZXID 值
       最新的数据快照文件解析失败时, 转而解析次新的数据快照文件, 直至 100 份数据快照文件全部解析失败, 则软件启动失败并执行异常退出操作



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的启动过程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的启动过程描述如下:

    1. 预启动环节
    ─────────────────────────────────────────────────────────────────
        (1) 创建 QuorumPeerMain 线程作为启动线程
        (2) 解析 /path/to/zoo.cfg 配置文件并读取参数
        (3) 创建 DatadirCleanupManager 线程作为历史文件清理器
        (4) 判断使用单点模式/ 集群模式启动软件

    2. 初始化环节
    ─────────────────────────────────────────────────────────────────
        (1) 创建 ServerCnxnFactory 线程
        (2) 执行数据恢复步骤 (RECOVERY DATA STEP)
        (3) 使用 ServerCnxnFactory 线程控制事务
    
    3. 领导选举环节
    ─────────────────────────────────────────────────────────────────
        (1) 执行初始领导选举 (始终把第一次的选票投给自己)
        (2) 参与集群领导选举 (基于比较选票, 软件把选票投给最合适的服务实例)

    4. 领导者与追随者的事务交互环节
    ─────────────────────────────────────────────────────────────────
        (1) 软件进入领导者/ 追随者的工作角色
        (2) 领导者创建 LearnerCnxAcceptor 线程用于接受追随者的连接请求
        (3) 追随者向领导者发起请求并建立连接
        (4) 领导者创建 LearnerHandler 线程用于管理领导者和追随者之间的事务通信与数据同步
        (5) 追随者向领导者发送注册信息 (SID, ZXID, EPOCH, ...)
        (6) 领导者解析注册信息并使用 MAX(EPOCH) + 1 的计算结果标记自己的领导任期
        (7) 领导者向追随者发送消息包
        (8) 追随者基于领导者发来的消息包解析出分布式集群的 ZXID/ EPOCH 值, 向领导者回复 ACK 响应
        (9) 领导者向追随者发送需要同步的事务

    5. 服务打开环节
    ─────────────────────────────────────────────────────────────────
        (1) 软件创建用户会话管理器
        (2) 注册 JMX 服务
        (3) 领导者开启读写服务, 追随者开启只读服务



