 , __                                                     
/|/  \                                    o               
 |___/ ,_    _    _   __,   ,_    __, _|_     __   _  _   
 |    /  |  |/  |/ \_/  |  /  |  /  |  |  |  /  \_/ |/ |  
 |       |_/|__/|__/ \_/|_/   |_/\_/|_/|_/|_/\__/   |  |_/
               /|                                         
               \|                                                                                                         
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件的发展历程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ZooKeeper 软件是互联网生态中最常见的分布式协调软件, 能够提供服务注册/ 统一命名/ 配置管理/ 分布式锁服务
ZooKeeper 软件由雅虎公司 (Yahoo) 的软件研究院最先发布, 目前由阿帕奇软件基金会 (Apache Software Foundation) 负责迭代与维护
ZooKeeper 软件的早期版本 (v1/ v2) 难觅踪迹, 当下的主流 v3 版本使用渐进式的发版策略:

    •  使用最高版本编号的 ZooKeeper 软件作为开发使用的调试版本 (current version), 用于功能与特性的添加测验
    •  使用次高版本编号的 ZooKeeper 软件作为稳定发布的产线版本 (stable version), 提供给业务环境做部署使用的同时, 不断修复软件故障
    •  使用推进版本编号的办法不断发行调试版本/ 产线版本 (同时不再维护旧的软件版本)
    •  因为管理不善, 阿帕奇软件基金会发布的软件早期版本同样难觅踪迹 (v3.0/ v3.1/ v3.2/ v3.3)

┌────────────┬──────────┬─────────────────────────────────────────────────────────────────────────────────────────────┐
│            │          │ •                                                                                           │
│ 2008-10-27 │ 3.0.0    │ •                                                                                           │
│            │          │ •                                                                                           │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ •                                                                                           │
│ 2009-02-13 │ 3.1.0    │ •                                                                                           │
│            │          │ •                                                                                           │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ •                                                                                           │
│ 2009-07-08 │ 3.2.0    │ •                                                                                           │
│            │          │ •                                                                                           │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ •                                                                                           │
│ 2010-03-25 │ 3.3.0    │ •                                                                                           │
│            │          │ •                                                                                           │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • add logging/stats to identify fsync stalls                                                │
│ 2011-11-22 │ 3.4.0    │ • ephemeral node not removed after the client session is long gone                          │
│            │          │ • database multi-update                                                                     │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • provide accessor for request                                                              │
│ 2014-08-06 │ 3.5.0    │ • backward compatibility of zoo.cfg                                                         │
│            │          │ • allow dynamic addition/removal of server node in the client API                           │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • unique database identifier for server and client                                          │
│ 2020-03-04 │ 3.6.0    │ • audit logging in server                                                                   │
│            │          │ • JMX monitor ability in real-time                                                          │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • quota enforcement                                                                         │
│ 2021-03-27 │ 3.7.0    │ • a choice of mandatory authentication scheme                                               │
│            │          │ • SASL support in the C/ Perl client                                                        │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • migration the logging framework from Apache Log4j to LogBack                              │
│ 2022-07-07 │ 3.8.0    │ • read trust/key store password from file                                                   │
│            │          │ • restored support for OSGI                                                                 │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • admin server API for taking snapshot and stream out the data                              │
│ 2023-08-03 │ 3.9.0    │ • TLS - dynamic loading for client trust/key store                                          │
│            │          │ • improve syncRequestProcessor performance                                                  │
└────────────┴──────────┴─────────────────────────────────────────────────────────────────────────────────────────────┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
分布式一致性协议
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
分布式一致性协议:

    •  2PC   :: 官方翻译为二阶段提交协议 (2 Phase Commit)
    •  3PC   :: 官方翻译为三阶段提交协议 (3 Phase Commit)
    •  Paxos :: 旧金山的计算机科学家兰伯特 (Leslie Lamport) 设计的 Paxos 协议, 协议名称取自古希腊传说中的岛屿
    •  ZAB   :: 官方翻译为原子消息广播协议 (ZooKeeper Atomic Broadcast), 专用于 ZooKeeper 软件的分布式一致性协议

2PC
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2PC 把分布式集群的事务提交过程切分为请求事务/ 提交事务 (回滚事务) 在内的两个顺序阶段, 2PC 被用作关系型数据库处理分布式事务
2PC 把分布式集群的节点区分为协调者 (Coordinator)/ 参与者 (Participant): 协调者统一调度参与者的执行逻辑, 并决定参与者是否提交事务
2PC 的详细内容说明如下:

    阶段一: 请求事务
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 协调者向每个参与者发送事务内容, 询问参与者是否有条件能够提交事务
    2. 参与者执行事务并产生出重做数据 (redo data)/ 回退数据 (undo data) 写入事务日志文件
    3. 参与者向协调者反馈事务执行结果 (分为事务执行成功的响应与事务执行失败的响应)

    阶段二: 完成事务 [每个参与者的事务执行成功]
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 协调者向每个参与者发送事务提交请求
    2. 参与者提交事务
    3. 参与者反馈事务提交结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务提交

    阶段二: 回滚事务 [任意参与者的事务执行失败]
    ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━
    1. 协调者向每个参与者发送事务回滚请求
    2. 参与者使用回退数据回滚事务
    3. 参与者反馈事务回滚结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务回滚

3PC
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3PC 把分布式集群的事务提交过程切分为提交请求事务/ 预提交事务 (中断事务)/ 提交事务 (回滚事务) 在内的三个顺序阶段
3PC 把分布式集群的节点区分为协调者 (Coordinator)/ 参与者 (Participant): 协调者统一调度参与者的执行逻辑, 并决定参与者是否提交事务
3PC 的详细内容说明如下:

    阶段一: 请求事务
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 协调者向每个参与者发送事务内容, 询问参与者是否有条件能够提交事务
    2. 参与者评估自身是否有条件能够提交事务
    3. 参与者向协调者反馈自身的条件评估结果

    阶段二: 预提交事务 [每个参与者的评估结果为成功]
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 协调者向每个参与者发送预提交请求, 协调者自身则进入准备状态
    2. 参与者执行事务并产生出重做数据 (redo data)/ 回退数据 (undo data) 写入事务日志文件
    3. 参与者向协调者反馈事务执行结果 (分为事务执行成功的响应与事务执行失败的响应)

    阶段二: 中断事务 [任意参与者的评估结果为失败]
    ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━
    1. 协调者向每个参与者发送事务中断请求
    2. 参与者中断事务 (参与者在等待协调者消息超时之后, 会自行中断事务)

    阶段三: 提交事务 [每个参与者的事务执行成功]
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    1. 协调者向每个参与者发送事务提交请求, 协调者自身则进入提交状态
    2. 参与者提交事务
    3. 参与者反馈事务提交结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务提交

    阶段三: 回滚事务 [任意参与者的事务执行失败]
    ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━
    1. 协调者向每个参与者发送事务回滚请求
    2. 参与者使用回退数据回滚事务
    3. 参与者反馈事务回滚结果
    4. 协调者接收到每个参与者反馈的 ACK 消息之后, 完成整个分布式集群的一次事务回滚

Paxos
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Paxos ???

ZAB
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━







