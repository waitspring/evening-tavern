   _                                                            
  | |                         |                 o               
  | | _  _  _|_  ,_    __   __|          __ _|_     __   _  _   
_ |/ / |/ |  |  /  |  /  \_/  |  |   |  /    |  |  /  \_/ |/ |  
\_/\/  |  |_/|_/   |_/\__/ \_/|_/ \_/|_/\___/|_/|_/\__/   |  |_/
                                                                
                                                                
--  This document was created by Xuanming in 2023, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Kafka 软件的基本架构
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    •  Message     [ 消息 ] 最小细粒度的数据单元, 具有消息头与消息体两个构造部分
    •  Batch       [ 批次 ] 数量不定的消息集合, 生产者与消费者按照批次, 批量地读写软件内寄存的消息
    •  Schema      [ 模式 ] 消息使用的数据格式的模版, 较常见的模式有 Apache Avro 序列化器
    •  Topic       [ 主题 ] 消息的类别, 生产者与消费者共同使用的一个逻辑概念, 生产者与消费者订阅相同主题时构建起数据传播通道
    •  Partition   [ 分区 ] 主题的分区, 默认从数值 0 开始编号, 与节点上的业务数据目录 (/path/to/data/topic-[0-9]) 形成映射关系
    •  Replica     [ 副本 ] 分区的副本, 数量范围为 1 ~ 节点数量 (最大值为 32767)
    •  Leader      [ 读写副本 ] 支持生产者/ 消费者读写的副本, 每个分区有且仅有 1 个读写副本
    •  Follower    [ 同步副本 ] 能够拉取读写副本内的数据的同步副本, 每个分区可以有 i 个同步副本 (i ∈ [0, Broker - 1])
    •  Broker      [ 节点 ] 运行 Kafka 软件服务的主机节点, 同一个分区的不同副本必然存在于不同节点
    •  Cluster     [ 集群 ] 若干 Kafka 软件服务的主机节点构成的一个分布式集群
    •  Producer    [ 生产者 ] 数据单元的生产者
    •  Consumer    [ 消费者 ] 数据单元的消费者
    •  Offset      [ 偏移量 ] 消费者已经消费过的消息在分区内的索引号

""""""""" 演示分区/ 副本/ 节点的概念
[root ~]# /usr/local/kafka/bin/kafka-topics.sh   \
--create                                         \
--topic A                                        \
--partitions 3                                   \
--replication-factor 3                           \
--bootstrap-server kafka-0.season.com:9092,kafka-1.season.com:9092,kafka-2.season.com:9092
[root ~]# /usr/local/kafka/bin/kafka-topics.sh   \
--create                                         \
--topic B                                        \
--partitions 3                                   \
--replication-factor 1                           \
--bootstrap-server kafka-0.season.com:9092,kafka-1.season.com:9092,kafka-2.season.com:9092
--------------------------------------------------------------------------------------------------------------------- ✻

    ┌─────────────────────────────────┐   ┌─────────────────────────────────┐   ┌─────────────────────────────────┐
    │ kafka-0.season.com:9092         │   │ kafka-1.season.com:9092         │   │ kafka-2.season.com:9092         │
    │ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ │   │ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ │   │ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ ┌╌╌╌╌╌┐ │
    │ ┊ A-0 ┊ ┊ A-1 ┊ ┊ A-2 ┊ ┊ B-0 ┊ │   │ ┊ A-0 ┊ ┊ A-1 ┊ ┊ A-2 ┊ ┊ B-1 ┊ │   │ ┊ A-0 ┊ ┊ A-1 ┊ ┊ A-2 ┊ ┊ B-2 ┊ │
    │ └╌╌┬╌╌┘ └╌╌╌╌╌┘ └╌╌╌╌╌┘ └╌╌╌╌╌┘ │   │ └╌╌╌╌╌┘ └╌╌┬╌╌┘ └╌╌╌╌╌┘ └╌╌╌╌╌┘ │   │ └╌╌╌╌╌┘ └╌╌╌╌╌┘ └╌╌┬╌╌┘ └╌╌╌╌╌┘ │
    └────┊───────┊───────┊────────────┘   └────┊───────┊───────┊────────────┘   └────┊───────┊───────┊────────────┘
         ┊       ┊       ┊                     ┊       ┊       ┊                     ┊       ┊       ┊
         └╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘       ┊       ┊
                 └╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌┊╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘       ┊
                         └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

    (使用 3 副本策略创建主题 A 的三个分区, 则单个分区会以读写副本与同步副本的形式, 在每个节点出现 1 次)
    (使用 1 副本策略创建主题 B 的三个分区, 则单个分区仅以读写副本的形式, 在某个节点出现 1 次)



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Kafka 软件的副本机制
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Kafka 软件的副本机制涉及到若干专有名词

┌────────┬───────────────────┬─────────────────────────────────────────────────────────────────────────────────────────
│ AR     │ All Replica       │ 全部副本集合
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ ISR    │ In Sync Replica   │ 有效副本集合, 读写副本与有效的同步副本的集合
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│        │ Log Start Offset  │ 单个副本内的起始位移值 (最小偏移量), 这个值最初为 0 数值, 但可能因多种原因发生变化
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ LEO    │ Log End Offset    │ 单个副本内的末端位移值 (最大偏移量), 这个值表示下一条消息写入分区时, 将会使用的索引位置
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ HW     │ High Watermark    │ 分区的高水位线, 这个值是 ISR 中的 LEO 最小值, 标记消费者能够消费到的最新消息的位置
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ LW     │ Low Watermark     │ 分区的低水位线, 这个值是 ISR 中的 Log Start Offset 最小值, 标记消费者能够消费到的最早消息的位置
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ LSO    │ Log Stable Offset │ 生产者已提交事务的位移值 (如果开启软件的事务特性, 生产者把消息写入分区时, 可以标记消息的提交状态)
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ CO     │ Consumer Offset   │ 消费者消费消息的位移值
├────────┼───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ LAG    │                   │ 消费者尚未消费的消息区间
└────────┴───────────────────┴─────────────────────────────────────────────────────────────────────────────────────────

阅读上述图表时, 还请注意:

    •  如果同步副本拉取读写副本内的业务数据的效率无法满足软件的参数要求, 则同步副本会被判定为失效, 失效的同步副本会被软件择机重建
    •  如果读写副本因节点宕机而失效, 那么 ISR 中具有 LEO 最大值的同步副本被推举为新的读写副本
    •  如果软件开启事务提交机制, 消费者尚未消费的消息区间的计算公式为 LAG = LSO - Consumer Offset
    •  如果软件关闭事务提交机制, 消费者尚未消费的消息区间的计算公式为 LAG =  HW - Consumer Offset
    •  事务位移值/ 高水位线/ 末端位移值之间的关系为 LSO ≤ HW ≤ LEO

┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                     │
│   A-0 Partition                                                                                                     │
│                                                                                                                     │
│   ┌──────────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬───┬───┬───┬───┬───┬───┬───┐┌╌╌╌┐               │
│   │ Follower │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 ├┼┼┼┼┼┼┼┼┼┼┼┼┼┤   │   │   │   │   │   │   │┊   ┊               │
│   └──────────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴┴┴┴┴┴┴┴┴┴┴┴┴┴┴───┴───┴───┴───┴─┬─┴───┴───┘└╌╌╌┘               │
│                                                                                      ┊                              │
│   ┌──────────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬───┬───┬───┬───┬─┴─┐┌╌╌╌┐                       │
│   │ Follower │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 ├┼┼┼┼┼┼┼┼┼┼┼┼┼┤   │   │   │   │   │┊   ┊                       │
│   └──────────┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴┴┴┴┴┴┴┴┴┴┴┴┴┴┴───┴───┴───┴───┴─┬─┘└╌╌╌┘                       │
│                                                                                      ┊                              │
│   ┌──────────┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬───┬───┬───┬───┬─┴─┬───┬───┬───┬───┬───┐┌╌╌╌┐   │
│   │ Leader   │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 ├┼┼┼┼┼┼┼┼┼┼┼┼┼┤   │   │   │   │   │   │   │   │   │   │┊   ┊   │
│   └──────────┴───┴───┴───┴─┬─┴───┴───┴───┴───┴───┴───┴┴┴┴┴┴┴┴┴┴┴┴┴┴┴───┴───┴─┬─┴───┴─┬─┴───┴───┴───┴───┴───┘└╌┬╌┘   │
│                     Consumer Offset                                         LSO     HW                       LEO    │
│                            ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌ LAG ╌╌╌╌┘       ┊                              │
│                            ┊                                                         ┊                              │
│                            └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌ LAG ╌╌╌╌╌╌╌╌╌╌╌╌┘                              │
│                                                                                                                     │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

                        ┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
                        ┊  ┌───────────────────────────────────────────────────────────────┐  ┊
                        ┊  │ kafka-0.season.com:9092                                       │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┬───┐┌╌╌╌┐                          │  ┊
                        ┊  │ │ A-0 │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │┊ 6 ┊                          │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┴───┘└╌╌╌┘                          │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┬───┬───┬───┬───┐┌╌╌╌┐              │  ┊
                        ┊  │ │ A-1 │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │┊ 9 ┊              │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┴───┴───┴─┬─┴───┘└╌╌╌┘              │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┐┌╌╌╌┐    ┊                         │  ┊
                        ┊  │ │ A-2 │ 0 │ 1 │ 2 │ 3 │ 4 │┊ 5 ┊    ┊ A-1 HW                  │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┘└╌╌╌┘    ┊                         │  ┊
                        ┊  └─────────────────────────────────────┊─────────────────────────┘  ┊
                        ┊  ┌─────────────────────────────────────┊─────────────────────────┐  ┊
┌─────────────┐         ┊  │ kafka-1.season.com:9092             ┊                         │  ┊         ┌─────────────┐
│ Producer A0 ├╌╌╌╌┐    ┊  │ ┌─────┬───┬───┬───┬───┬───┬───┐┌╌╌╌┐┊                         │  ┊    ┌╌╌╌╌┤ Consumer A0 │
└─────────────┘    ┊    ┊  │ │ A-0 │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │┊ 6 ┊┊                         │  ┊    ┊    └─────────────┘
                   ┊    ┊  │ └─────┴───┴───┴───┴───┴───┴───┘└╌╌╌┘┊                         │  ┊    ┊
┌─────────────┐    ┊    ┊  │ ┌─────┬───┬───┬───┬───┬───┬───┬───┬─┴─┐┌╌╌╌┐                  │  ┊    ┊    ┌─────────────┐
│ Producer A1 ├╌╌╌╌┼╌╌╌>┊  │ │ A-1 │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │┊ 8 ┊                  │  ┊<╌╌╌┼╌╌╌╌┤ Consumer A1 │
└─────────────┘    ┊    ┊  │ └─────┴───┴───┴───┴───┴───┴───┴───┴─┬─┘└╌╌╌┘                  │  ┊    ┊    └─────────────┘
                   ┊    ┊  │ ┌─────┬───┬───┬───┬───┬───┐┌╌╌╌┐    ┊                         │  ┊    ┊
┌─────────────┐    ┊    ┊  │ │ A-2 │ 0 │ 1 │ 2 │ 3 │ 4 │┊ 5 ┊    ┊                         │  ┊    ┊    ┌─────────────┐
│ Producer A2 ├╌╌╌╌┘    ┊  │ └─────┴───┴───┴───┴───┴───┘└╌╌╌┘    ┊                         │  ┊    └╌╌╌╌┤ Consumer A2 │
└─────────────┘         ┊  └─────────────────────────────────────┊─────────────────────────┘  ┊         └─────────────┘
                        ┊  ┌─────────────────────────────────────┊─────────────────────────┐  ┊
                        ┊  │ kafka-2.season.com:9092             ┊                         │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┐┌╌╌╌┐    ┊                         │  ┊
                        ┊  │ │ A-0 │ 0 │ 1 │ 2 │ 3 │ 4 │┊ 5 ┊    ┊                         │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┘└╌╌╌┘    ┊                         │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┬───┬───┬─┴─┐┌╌╌╌┐                  │  ┊
                        ┊  │ │ A-1 │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │┊ 8 ┊                  │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┴───┴───┴───┘└╌╌╌┘                  │  ┊
                        ┊  │ ┌─────┬───┬───┬───┬───┬───┐┌╌╌╌┐                              │  ┊
                        ┊  │ │ A-2 │ 0 │ 1 │ 2 │ 3 │ 4 │┊ 5 ┊                              │  ┊
                        ┊  │ └─────┴───┴───┴───┴───┴───┘└╌╌╌┘                              │  ┊
                        ┊  └───────────────────────────────────────────────────────────────┘  ┊
                        └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

阅读上述图例时, 还请注意:

    •  分区内部的消息具有连续特性, 而分区相互之间的消息不存在连续特性, 这意味着消息在主题范围内不存在连续特性
    •  软件默认使用轮询策略为生产者/ 消费者引导分区, 生产者/ 消费者自身亦可在发起连接时指定分区
    •  创建主题时, 建议分区数量/ 副本数量与节点数量保持一致



