   _                                                            
  | |                         |                 o               
  | | _  _  _|_  ,_    __   __|          __ _|_     __   _  _   
_ |/ / |/ |  |  /  |  /  \_/  |  |   |  /    |  |  /  \_/ |/ |  
\_/\/  |  |_/|_/   |_/\__/ \_/|_/ \_/|_/\___/|_/|_/\__/   |  |_/
                                                                
                                                                
--  This document was created by Xuanming in 2025, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的工作原理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件把用户提交动作内的变更内容拆解为提交元数据 (OBJ:Commit), 目录树结构 (OBJ:Tree), 数据内容 (OBJ:Blob)
Git 软件把用户制作的标签拆解为标签元数据 (Obj:Tag), 标签引用记录
Git 软件使用 SHA-1 算法为每一个提交元数据, 目录树结构, 数据内容, 标签元数据单独计算一串 40 位长度的十六进制识别码
Git 软件使用 SHA-1 识别码组织变更存储目录 (.git/objects), 存储提交元数据, 目录树结构, 数据内容, 标签元数据
Git 软件使用引用存储目录 (.git/refs) 明文存储本地分支, 远程分支, 标签的引用记录, 记录内容是一串 40 位长度的十六进制识别码
Git 软件使用分支符号文件 (.git/HEAD) 明文存储用户工作区域加载的本地分支对象 (明文存储提交动作的 SHA-1 编码时, HEAD 进入游离状态)
Git 软件将在拓扑结构上形成有向无环图 (DAG: Directed Acyclic Graph)

Git 软件的有向无环图的示意图如下
                                                    ┌──────────────┐
                                                    │    Tag: cooo │
                                                    └───────┬──────┘
                                                            ┊
    ┌──────────────┐        ┌──────────────┐                ┊
    │ Branch: aooo │        │ Remote: aooo │                ┊
    └───────┬──────┘        └───────┬──────┘                v
            ┊                       ┊               ┌──────────────┐        ┌──────────────┐        ┌──────────────┐
            └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤               │    Tag: a86d │        │         HEAD ├╌╌╌╌╌╌╌>│ Branch: booo │
                                    ┊               └───────┬──────┘        └──────────────┘        └───────┬──────┘
                                    v                       │                                               │
    ┌──────────────┐        ┌──────────────┐                │                                               │
    │ Commit: e7b4 │<───────┤ Commit: e713 │<───┐           │                                               │
    └──────────────┘        └──────────────┘    │           v                                               v
    ┌──────────────┐        ┌──────────────┐    │   ┌──────────────┐        ┌──────────────┐        ┌──────────────┐
    │ Commit: 658c │<───────┤ Commit: 6574 │<───┴───┤ Commit: 6508 │<───────┤ Commit: 6502 │<───────┤ Commit: 6598 │
    └──────────────┘        └──────────────┘        └───────┬──────┘        └──────────────┘        └──────────────┘
                                                            │
                                                            │
                                                            │
                                                            v
                                                    ┌──────────────┐        ┌──────────────┐        ┌──────────────┐
                                                    │   Tree: 9f16 ├───────>│   Tree: 9f55 ├───┬───>│   Blob: 6517 │
                                                    └───────┬──────┘        └──────────────┘   │    └──────────────┘
                                                            │                                  │
                                    ┌───────────────────────┼───────────────────────┐          │
                                    │                       │                       │          │
                                    v                       v                       v          │
                            ┌──────────────┐        ┌──────────────┐        ┌──────────────┐   │
                            │   Blob: 9f62 │        │   Blob: 65de │        │   Blob: a87b │<──┘
                            └──────────────┘        └──────────────┘        └──────────────┘

阅读上述示意图时, 还请注意:

    •  标签元数据的数据结构内, 有且仅有一个指针指向提交元数据
    •  提交元数据的数据结构内, 有且仅有一个指针指向目录树结构, 同时有数量不确定的指针指向其他的提交元数据
    •  目录树结构的数据结构内, 有数量不确定的指针指向数据内容, 同时有数量不确定的指针指向其他的目录树结构

""""""""" 演示 .git 目录的数据结构
[root ~]# tree /tmp/season/.git
/tmp/season/.git
    │
    ├──── HEAD                                   # ref: refs/heads/booo
    ├──── objs
    │     ├──── 65
    │     │     ├──── 0200c8d2aa30231056db4cfd2a9e25f1d0dfb1
    │     │     ├──── 084a81f3e2d3c4b5a6978876543210fedcba9a
    │     │     ├──── 175c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0fa221
    │     │     ├──── 74f032c83a4b5c6d7e8f9a0b1c2d3e4f5a6b7c
    │     │     ├──── 8c8d5f3a1b2c3d4e5f6a7b8c9d0e1f2a3babc1
    │     │     ├──── 983f7a2b4c5d6e7f8a9b0c1d2e3f4a5b6ccb64 <╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
    │     │     └──── de1b2c3d4e5fd6e7f8c17f8a90c8d2a27c6bc2                                         ┊
    │     ├──── 9f                                                                                   ┊
    │     │     ├──── 169f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4c1901                                         ┊
    │     │     ├──── 55f5e4d3c2b1a0f9e8d7c6b5a493827162efcd                                         ┊
    │     │     └──── 622b4c5d6e7f8c12b3c47a8b9c09c0d1e27c6b                                         ┊
    │     ├──── a8                                                                                   ┊
    │     │     ├──── 6dd40138627477cee5f2aa08ddc3954374c11a <╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
    │     │     └──── 7bf3aae5c6bf3931534b11342bbfe188e5c2a1                                         ┊   ┊
    │     └──── e7                                                                                   ┊   ┊
    │           ├──── 1344e52a56dc87b0593645985bac448dbfffe7 <╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐   ┊   ┊
    │           └──── b424422286ba4db7be6ed23091253a1ac9717b                                     ┊   ┊   ┊
    └──── refs                                                                                   ┊   ┊   ┊
          ├──── heads                                                                            ┊   ┊   ┊
          │     ├──── aooo                       # e71344e52a56dc87b0593645985bac448dbfffe7 ╌╌╌╌╌┤   ┊   ┊
          │     └──── booo                       # 65983f7a2b4c5d6e7f8a9b0c1d2e3f4a5b6ccb64 ╌╌╌╌╌╌╌╌╌┘   ┊
          ├──── remotes                                                                          ┊       ┊
          │     └──── origin                                                                     ┊       ┊
          │           ├──── HEAD                 # ref: refs/remotes/origin/master               ┊       ┊
          │           ├──── aooo                 # e71344e52a56dc87b0593645985bac448dbfffe7 ╌╌╌╌╌┘       ┊
          │           └──── master               #                                                       ┊
          └──── tags                                                                                     ┊
                └──── cooo                       # a86dd40138627477cee5f2aa08ddc3954374c11a ╌╌╌╌╌╌╌╌╌╌╌╌╌┘
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的业务流程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
远程仓库 ( ORIGIN REPOSITORY ) GitHub/ GitLab/ Bitbucket/ ... 项目提供的远程仓库服务, 使得用户能够协调社区工作
本地仓库 (  LOCAL REPOSITORY ) Git 软件提供的本地仓库服务, 使得用户能够编辑源码, 提交变更, 管理分支
远程分支 ( ORIGIN BRANCH     ) Git 软件提供的开发共享服务, 使得用户能够共享源码, 审查源码, 合并源码
本地分支 (  LOCAL BRANCH     ) Git 软件提供的开发隔离服务, 使得用户能够隔离源码, 自检源码
主干分支 (        MASTER     ) Git 软件提供的工程主干分支, 工程主干分支应当托管能够被发布为产品的长期稳定源码
工作分支 (   WORK BRANCH     ) Git 软件提供的用户工作分支, 用户当前正在使用的本地分支被称作工作分支
发布版本 (        RELEASE    ) Git 软件提供的版本标记服务, 版本的发布对象有源码文件/ 执行文件/ 特性文件
索引区域 (  INDEX STAGE      ) Git 软件提供的临时存储区域, 数据集中寄存在 /PATH/TO/DIR/.git/index 文件
工作区域 (        WORKSPACE  ) 用户直接使用文本编辑器读写操作的源码文件

Git 软件的业务流程的示意图如下
                                                                          ┌───────────────────────────────────────┐
                                                                          │ ┌╌╌╌╌╌╌╌╌╌╌╌╌┐                        │
                                                 ┌────────────────┐       │ ┊ MASTER     ├────┐                   │
                                                 │ ┌╌╌╌╌╌╌╌╌╌╌╌╌┐ │       │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤    │    ┌╌╌╌╌╌╌╌╌╌╌╌╌┐ │
                                                 │ ┊ BRANCH_0   ┊ │       │ ┊ BRANCH_0   ┊    ├───>┊ RELEASE_0  ┊ │
    ┌────────────┐         ┌────────────┐        │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │       │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤    │    ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │
    │ WORKSPACE  ├────────>│ INDEXSPACE ├─────────>┊ BRANCH_1   ┊<────┬────>┊ BRANCH_1   ┊    ├───>┊ RELEASE_1  ┊ │
    └────────────┘         └────────────┘        │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │   │   │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤    │    ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │
          ^                                      │ ┊ BRANCH_2   ┊ │   │   │ ┊ BRANCH_2   ┊    ├───>┊ RELEASE_2  ┊ │
          │                                      │ └╌╌╌╌╌╌╌╌╌╌╌╌┘ │   │   │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤    │    ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │
          │                                      │   LOCAL REPO   │   │   │ ┊ BRANCH_3   ┊    └───>┊ RELEASE_3  ┊ │
          │                                      └────────────────┘   │   │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤         └╌╌╌╌╌╌╌╌╌╌╌╌┘ │
          └───────────────────────────────────────────────────────────┘   │ ┊ BRANCH_4   ┊                        │
                                                                          │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤                        │
                                                 ┌────────────────┐       │ ┊ BRANCH_5   ┊                        │
                                                 │ ┌╌╌╌╌╌╌╌╌╌╌╌╌┐ │       │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤                        │
                                                 │ ┊ BRANCH_6   ┊<─────────>┊ BRANCH_6   ┊                        │
    ┌────────────┐         ┌────────────┐        │ ├╌╌╌╌╌╌╌╌╌╌╌╌┤ │       │ └╌╌╌╌╌╌╌╌╌╌╌╌┘                        │
    │ WORKSPACE  ├────────>│ INDEXSPACE ├─────────>┊ BRANCH_7   ┊ │       │   ORIGIN REPO                         │
    └────────────┘         └────────────┘        │ └╌╌╌╌╌╌╌╌╌╌╌╌┘ │       └───────────────────────────────────────┘
                                                 │   LOCAL REPO   │
                                                 └────────────────┘

工作区域/ 索引区域/ 本地分支三者之间, 使用源码文件为单位比较数据差异, 因此需要用户关注源码文件的不同状态:

    ┌────────────┐
    │    IGNORED │ • ( 工作区域 ) 源码文件为忽略状态
    │    DELETED │ • ( 工作区域 ) 源码文件为删除状态, 但同时本地分支仍然存在相应的源码文件
    │  UNTRACKED │ • ( 工作区域 ) 源码文件为新增状态, 但同时本地分支既不存在相应的源码文件, 亦不存在相应的源码文件提交记录
    │ UNMODIFIED │ • ( 工作区域 ) 源码文字为未变状态, 这表示工作区域内的源码文件和本地分支内的源码文件保持数据一致
    │   MODIFIED │ • ( 工作区域 ) 源码文件为变更状态, 这表示工作区域内的源码文件和本地分支内的源码文件存在数据差异
    │     STAGED │ • ( 索引区域 ) 源码文件寄存有一份变更快照
    └────────────┘
    ┌────────────────────────────────────────────┬────────────────────────────────────────────────────────────────┐
    │    IGNORED -------------------> STAGED     │ $ git add --force file...                                      │
    │  UNTRACKED -------------------> STAGED     │ $ git add [option...] file...                                  │
    │   MODIFIED -------------------> STAGED     │ $ git add [option...] file...                                  │
    │     STAGED -------------------> UNTRACKED  │ $ git restore --staged file...                                 │
    │     STAGED -------------------> MODIFIED   │ $ git restore --staged file...                                 │
    │   MODIFIED -------------------> UNMODIFIED │ $ git restore file...                                          │
    │     STAGED -------------------> UNMODIFIED │ $ git commit [option...]                                       │
    └────────────────────────────────────────────┴────────────────────────────────────────────────────────────────┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的索引区域
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的索引区域是数据的临时存储区域, 用户编辑源码文件产生的内容变更, 将会使用文件快照的形式临时寄存在索引区域
Git 软件的索引区域的数据处理逻辑如下:

    •  源码文件的快照数据 (二进制格式) 集中寄存在索引区域, 寄存快照有且仅有一份
    •  源码文件的快照数据 (二进制格式) 提交到本地仓库同时, 索引区域清空源码文件的快照数据
    •  用户回滚工作区域内源码文件的同时, 索引区域清空源码文件的快照数据

    ┌───────────────────────────────────┐        ┌───────────────────────────────────┐
    │ WORKSPACE                         │        │ INDEXSPACE                        │
    ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
    │ /PATH/TO/DIR                      │        │ /PATH/TO/DIR/.git/index           │
    │      ├─── FILE_0 (*) ────────────(1)────────────> /PATH/TO/DIR/FILE_0 (*)      │
    │      ├─── FILE_1                  │        ┌────> /PATH/TO/DIR/FILE_4 (*)      │
    │      ├─── FILE_2                  │   ┌────┼────> /PATH/TO/DIR/FILE_5 (*)      │
    │      ├─── FILE_3                  │   │    └────> /PATH/TO/DIR/FILE_6 (*)      │
    │      ├─── FILE_4 (*) ────┐        │   │    │                                   │
    │      ├─── FILE_5 (*) ────┼───────(2)──┘    │                                   │
    │      ├─── FILE_6 (*) ────┘        │        │                                   │
    │      └─── .gitignore              │        │                                   │
    └───────────────────────────────────┘        └───────────────────────────────────┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的分支管理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git 软件的分支管理涉及下述关键概念
┌──────────────────┬────────────────────┬──────────────────────────────────────────────────────────────────────────────
│  MASTER          │  LONG TERM BRANCH  │ 主干分支 (长期分支), 能够被发布为产品的长期稳定源码
├──────────────────┼────────────────────┼──────────────────────────────────────────────────────────────────────────────
│ DEVELOP          │  LONG TERM BRANCH  │ 开发分支 (长期分支), 集中管理工程的全量源码
├──────────────────┼────────────────────┼──────────────────────────────────────────────────────────────────────────────
│  BUGFIX_*        │ SHORT TERM BRANCH  │ 补丁分支 (短期分支), 用于修复编号为 * 的工程缺陷
├──────────────────┼────────────────────┼──────────────────────────────────────────────────────────────────────────────
│ FEATURE_*        │ SHORT TERM BRANCH  │ 特性分支 (短期分支), 用于实现编号为 * 的工程需求
├──────────────────┼────────────────────┼──────────────────────────────────────────────────────────────────────────────
│ RELEASE_*        │ SHORT TERM BRANCH  │ 版本分支 (短期分支), 用于测试版本为 * 的工程功能
└──────────────────┴────────────────────┴──────────────────────────────────────────────────────────────────────────────

FDD (Feature Driven Development) 工作流是社区官方推荐使用的工作流, 使用用户需求驱动产品开发
FDD (Feature Driven Development) 工作流能线性推进主干分支和开发分支的工程进度, 但无法横向兼容不同客户的需求差异
FDD (Feature Driven Development) 工作流有 GIT FLOW/ GITHUB FLOW/ GITLAB FLOW 三种具体实现模式

GIT FLOW 工作流的示意图如下

  1.0.0     1.0.1                                                  1.1.0
────O─────────O──────────────────────────────────────────────────────O──────────────────────────────────> (  MASTER   )
    │         ^                                                      ^
    └───>O────┤                                                      │                                    (  BUGFIX_* )
              │                                  ┌───>O─────────O────┤                                    ( RELEASE_* )
              v                                  │                   v
──────────────O─────────O──────────────O────O────O─────────O─────────O────O────O────────────────────────> ( DEVELOP   )
              │                        ^    ^
              ├───>O──────────────O────┘    │                                                             ( FEATURE_* )
              └─────────────>O──────────────┘                                                             ( FEATURE_* )

阅读 GIT FLOW 工作流的示意图时, 还请注意:

    •  主干分支/ 开发分支作为唯二的长期分支, 相互之间不直接产生代码合并操作
    •  补丁分支/ 版本分支内的提交信息, 都应该围绕缺陷修复展开, 前者由产品用户发现缺陷, 后者由产品团队发现缺陷
    •  特性分支/ 开发分支内的提交信息, 都应该围绕需求实现展开, 前者由产品用户发起需求, 后者由产品团队发起需求
    •  补丁分支/ 版本分支/ 特性分支作为短期分支, 分支名称应当直接附带缺陷编号和需求编号, 同时尽可能压缩分支内的提交数量

GITHUB FLOW 工作流的示意图如下

┌───────────┐
│   ISSUE   ├╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
└───────────┘      ┊                        ┊                        ┊
                   v                        v                        v
              ┌───>O────┐              ┌───>O────┐              ┌───>O────┐                               ( FEATURE_* )
              │         v              │         v              │         v
──────────────O─────────O──────────────O─────────O──────────────O─────────O─────────────────────────────> (  MASTER   )
                        ┊                        ┊                        ┊
                        ┊                        ┊                        ┊                               ┌───────────┐
                        └╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌> │  ACTION   │
                                                                                                          └───────────┘

阅读 GITHUB FLOW 工作流的示意图时, 还请注意:

    •  短期的特性分支使用 ISSUE  驱动, 每个短期的特性分支都对应一个 ISSUE 事件, 使用 PR 请求敏捷合并到长期的主干分支
    •  长期的主干分支捆绑 ACTION 事务, 每次 PR 请求敏捷合并到长期的主干分支, 立刻触发产品构建及产品部署事务, 形成完整的敏捷开发流水线



