 , __                                                                ______                _    _      
/|/  \                            ()                o               (_) |                 | |  | |     
 |___/ ,_    __                   /\  _   ,_            __   _          | ,_    __        | |  | |  _  
 |    /  |  /  \_/\/  |   |      /  \|/  /  |  |  |_|  /    |/        _ |/  |  /  \_|   | |/ \_|/  |/  
 |       |_/\__/  /\_/ \_/|/    /(__/|__/   |_/ \/  |_/\___/|__/     (_/    |_/\__/  \_/|_/\_/ |__/|__/
                         /|                                                                            
                         \|                                                                            
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决跨域请求产生的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HTTP/ HTTPS 协议使用协议与套接字划分服务域, 这意味着不同的 URL 仅在拥有相同的协议与套接字时, 会被视为一个同源网络服务
默认的, 发起请求的客户端 (浏览器) 仅允许访问同源网络服务, 这是客户端使用的一种安全保护策略
默认的, 发起请求的客户端 (浏览器) 又使用 CORS (Corss-Origin Resource Sharing) 策略解决跨域请求带来的问题

    *  Access-Control-Allow-Origin:       设置服务端放行跨域请求的来源范围, 从相应来源发起的访问请求不受到服务端检查
    *  Access-Control-Allow-Credentials:  设置服务端是否允许客户端请求在 CORS 内容中附带 Cookie 信息
    *  Access-Control-Allow-Methods:      设置服务端放行跨域请求的请求方法的范围, 仅允许固定几种方法的请求不受到服务端检查
    *  Access-Control-Max-Age:            设置服务端接受预检命令 (OPTIONS) 之后, 预检有效期的时间长度

阅读上述描述时, 还请注意:

    •  如果 Access-Control-Allow-Credentials 的值为真 (true), 那么 Access-Control-Allow-Origin 的值不应当配置为通配符 (*)
    •  如果 Access-Control-Max-Age 的值为零值 (0), 那么每个跨域请求都会提前发送 OPTIONS 方法的预检命令

跨域的情境举例如下
┌────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────
│ Situation                                      │ Comment
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 http:// 协议与 ldap:// 协议的访问请求会产生跨域
│ ldap://www.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 80 端口与 8081 端口的访问请求会产生跨域
│ http://www.season.com:8081/api?src=host        │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 www.season.com 子域与 foo.season.com 子域的访问请求会产生跨域
│ http://foo.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://season.com/api?src=host                 │ 使用 season.com 主域名与 napkin.com 主域名的访问请求会产生跨域
│ http://napkin.com/api?src=host                 │
└────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, 如何设置服务端 CORS 跨域支持策略
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Credentials true;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    add_header Access-Control-Allow-Headers $http_access_control_request_headers;
    add_header Access-Control-Max-Age 86400;
    if ($request_method = 'OPTIONS') {
        return 200;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决缓存中的域名解析记录失真的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
默认的, NginX 软件转发请求到一个域名服务时, 仅第一次转发需要使用 DNS 服务解析域名, 解析记录随即被 NginX 软件缓存并供后续转发动作使用
默认的, NginX 软件转发请求到一个域名服务时, 优先使用自身缓存的解析记录, 遭遇域名动态解析的情境时便产生下述问题:

┌───────┬──────────────────────────────────────────────────────┬──────────────────────────────────────────────────────┐
│ Time  │                        NginX                         │                         DNS                          │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   0   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.11.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   1   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   2   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 200 OK                                               │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   3   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.12.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   4   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   5   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 502 Bad Gateway                                      │                                                      │
│       │                                                      │                                                      │
└───────┴──────────────────────────────────────────────────────┴──────────────────────────────────────────────────────┘

""""""""" 演示 NginX 软件的配置文件内, 如何避免域名解析记录失真
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    resolver 223.5.5.5 223.6.6.6;
    location / {
        set $website "http://www.nginx.com";
        proxy_pass $website;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决若干 HTTP/HTTPS 请求中夹杂 WS/WSS 请求的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
WS/WSS 协议是一种由 HTML5 页面使用的通信协议, 已被大多数的浏览器兼容
WS/WSS 协议的核心特性为:

    •  TCP 连接一旦建立, 便可以构建起持久化的连接
    •  服务端可以主动向客户端推送数据, 而非像传统的 HTTP/HTTPS 协议长连接, 服务端只能等待客户端的请求并响应

使用 HTTP/HTTPS 协议代理请求时, 若请求使用 WSS 协议层 (即请求为 WebSocket 类型), 则使用下述特殊配置放行
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ proxy_set_header Connection 'Upgrade';                                                                              │
│ proxy_set_header Upgrade $http_upgrade;                                                                             │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    •  请求头使用键值对 Connection: Upgrade 标记一个键名为 Upgrade 的 hop-by-hop 键值对
    •  请求头使用键值对 Upgrade: WebSocket 把请求升级为 WS/WSS 协议

""""""""" 演示 NginX 软件的配置文件内, 如何避免域名解析记录失真
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header Connection 'Upgrade';
    proxy_set_header Upgrade $http_upgrade;
    proxy_connect_timeout 86400;
    proxy_read_timeout 86400;
    proxy_send_timeout 86400;
    proxy_buffers 8 512k;
    proxy_buffer_size 128k;
    proxy_busy_buffers_size 1m;
    proxy_temp_file_write_size 2m;
    location / {
        proxy_pass http://www.nginx.com;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何防止 DDoS (Distributed Denial of Service) 攻击?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
DDoS 攻击的中文翻译为 "分布式拒绝服务攻击"
DDoS 攻击通常是指攻击者向服务提交大量请求使得服务长期处于超负荷运行状态, 由此阻断其他用户访问服务, 从本质上讲 DDoS 攻击是一种流量攻击
DDoS 攻击的应对方案有:

    •  使用高防服务器, 限制 SYN/ ICMP 网络流量
    •  使用 DDoS 流量清洗方案
    •  使用 CDN (Content Delivery Network) 服务降低网络阻塞瓶颈
    •  使用 NginX 软件自带的限流功能模块 (请谨慎使用): 连接限流 (http_limit_conn_module), 访问限流 (http_limit_req_module)

HTTP 连接限流功能模块 http_limit_conn_module 常用配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ limit_conn_zone ...;                 │         │ 仅允许在 HTTP 配置块内编写, 分配一块内存区域用于实现连接限流管理
│ limit_conn ZONE NUMBER;              │         │ 在需要的 SERVER 配置块内编写, 设置相应键值的并发连接上限
│ limit_conn_dry_on on;                │         │ 开启连接限流功能模块的测试运行模式
│ limit_conn_dry_on off;               │    √    │ 关闭连接限流功能模块的测试运行模式
│ limit_conn_status 503;               │    √    │ 触发连接限流时, 使用 503  作为服务响应的 HTTP 状态码
│ limit_conn_status CODE;              │         │ 触发连接限流时, 使用 CODE 作为服务响应的 HTTP 状态码
│ limit_conn_log_level error;          │    √    │ 触发连接限流时, 相应日志的输出等级为错误等级 (error)
│ limit_conn_log_level LEVEL;          │         │ 触发连接限流时, 相应日志的输出等级为 LEVEL 等级
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

limit_conn_zone key zone=name:size;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
limit_conn_zone 配置项仅允许在 HTTP 配置块内编写, 用于定义连接限流管理用的内存区域 (不代表访问 HTTP 服务的站点会被限流)
limit_conn_zone 配置项的组成元素有
::  limit_conn_zone                              固定的关键字, 标记这是一条连接限流管理的配置项
::  key                                          必要的关键字, 指定连接限流的对象, 官方建议使用 $binary_remote_addr 作为关键字
::  zone=name:size                               必要的配置项, 分配一个名为 name 的内存区域, 该区域由 limit_conn 配置项调用

HTTP 功能模块 http_limit_req_module 常用配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ limit_req_zone ...;                  │         │ 仅允许在 HTTP 配置块内编写, 分配一块内存区域用于实现访问限流管理
│ limit_req zone=NAME burst=NUM;       │         │ 在需要的 SERVER 配置块内编写, 设置相应键值的访问数量上限
│ limit_req_dry_on on;                 │         │ 开启访问限流功能模块的测试运行模式
│ limit_req_dry_on off;                │    √    │ 关闭访问限流功能模块的测试运行模式
│ limit_req_status 503;                │    √    │ 触发访问限流时, 使用 503  作为服务响应的 HTTP 状态码
│ limit_req_status CODE;               │         │ 触发访问限流时, 使用 CODE 作为服务响应的 HTTP 状态码
│ limit_req_log_level error;           │    √    │ 触发访问限流时, 相应日志的输出等级为错误等级 (error)
│ limit_req_log_level LEVEL;           │         │ 触发访问限流时, 相应日志的输出等级为 LEVEL 等级
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

limit_req_zone key zone=name:size rate=speed;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
limit_req_zone 配置项仅允许在 HTTP 配置块内编写, 用于定义访问限流管理用的内存区域 (不代表访问 HTTP 服务的站点会被限流)
limit_req_zone 配置项的组成元素有
::  limit_req_zone                               固定的关键字, 标记这是一条访问限流管理的配置项
::  key                                          必要的关键字, 指定访问限流的对象, 官方建议使用 $binary_remote_addr 作为关键字
::  zone=name:size                               必要的配置项, 分配一个名为 name 的内存区域, 该区域由 limit_req 配置项调用
::  rate=speed                                   必要的配置项, 设置访问请求的速率限制为 speed (即多少时间内处理一次访问请求)

使用 limit_req_zone 配置项时, 还请注意:

    •  速率限制的 speed 参数可使用 [[:digit:]]+r/s 格式编写, 表示每秒钟仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略
    •  速率限制的 speed 参数可使用 [[:digit:]]+r/m 格式编写, 表示每分钟仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略
    •  速率限制的 speed 参数可使用 [[:digit:]]+r/h 格式编写, 表示每小时仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略

""""""""" 演示 NginX 软件的配置文件内, 如何启用限流管理
[root ~]# vim /etc/nginx/nginx.conf
http {
    ... ...
    ... ...
    limit_conn_zone $binary_remote_addr zone=conn_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_ip:10m rate=30r/m;
}
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    limit_conn conn_ip 100;                      | 限制每个 $binary_remote_addr 发起的并发连接上限为 100 个连接
    limit_req zone=req_ip burst=5;               | 限制每个 $binary_remote_addr 发起的访问速率上限为每两秒钟一次访问
}                                                | 某个客户端地址在两秒钟内发起超过 5 个请求, 则直接返回 503 状态码
--------------------------------------------------------------------------------------------------------------------- ✻



