  ___,                                                                              _    _    _ 
 /   |     |             o          o                        o                     | |  | |  | |
|    |   __|   _  _  _       _  _       , _|_  ,_    __, _|_     __   _  _         | |  | |  | |
|    |  /  |  / |/ |/ |  |  / |/ |  |  / \_|  /  |  /  |  |  |  /  \_/ |/ |      _ |/ _ |/ _ |/ 
 \__/\_/\_/|_/  |  |  |_/|_/  |  |_/|_/ \/ |_/   |_/\_/|_/|_/|_/\__/   |  |_/    \_/\/\_/\/\_/\/
                                                                                                
                                                                                                
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
LOCATION 配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
LOCATION 配置块是 SERVER 配置块的子配置块, 主要用于定义软件在 HTTP/HTTPS 协议层的路由分发规则, 其具体数量不定
LOCATION 配置块的内嵌配置项十分丰富, 但本文档仅介绍最基本的, 仅用于构建静态资源站点的配置项

┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   LOCATION PART {                                                                                                   ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

LOCATION 配置块能够内嵌的子配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ location URI {}                      │         │ 定义 LOCATION 配置块的路由规则, 并标记 LOCATION 配置块的作用域
│ root /PATH/TO/DIR;                   │         │ 定义 LOCATION 配置块的根目录
│ index index.html;                    │    √    │ 定义 LOCATION 配置块的根文件为 /PATH/TO/DIR/index.html 资源文件
│ index FILENAME;                      │         │ 定义 LOCATION 配置块的根文件为 /PATH/TO/DIR/FILENAME 资源文件
│ autoindex on;                        │         │ 缺失 LOCATION 配置块的根文件时, 展示 LOCATION 配置块的根目录结构
│ autoindex off;                       │    √    │ 缺失 LOCATION 配置块的根文件时, 隐藏 LOCATION 配置块的根目录结构
│ autoindex_exact_size on;             │    √    │ 展示 LOCATION 配置块的根目录结构时, 使用精确到 byte 的单位描述文件大小
│ autoindex_exact_size off;            │         │ 展示 LOCATION 配置块的根目录结构时, 使用符合使用习惯的容量单位描述文件大小
│ autoindex_localtime on;              │         │ 展示 LOCATION 配置块的根目录结构时, 使用服务端的时间戳
│ autoindex_localtime off;             │    √    │ 展示 LOCATION 配置块的根目录结构时, 使用客户端的时间戳
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

location [ option ] uri {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
location 配置项能够定义 LOCATION 配置块的路由规则, 并标记 LOCATION 配置块的作用域, 请求路由从左到右匹配路由规则
location 配置项常见的编写方法如下:

    •  location =  uri {}                       uri 仅允许使用常量编写, 请求路由精确且完整的命中规则才能生效
    •  location    uri {}                       uri 仅允许使用常量编写, 请求路由命中规则时生效
    •  location ^~ uri {}                       uri 仅允许使用常量编写, 请求路由命中规则时生效
    •  location ~  uri {}                       uri 允许使用正则表达式编写, 请求路由在匹配该规则时要区分字符大小写
    •  location ~* uri {}                       uri 允许使用正则表达式编写, 请求路由在匹配该规则时不区分字符大小写
    •  location    /   {}                       表示通用匹配, 无论请求路由如何都会命中规则

阅读上述表格时, 还请注意:

    •  配置块定义路由规则时, 不管使用常量编写还是使用正则表达式编写, 总是需要使用符号 (/) 开头, 以便命中请求路由中的起始 (/) 符号
    •  配置块使用 root 关键字定义根目录 /PATH/TO/DIR 信息, 则请求 URI 的实际访问对象为 /PATH/TO/DIR/URI
    •  若请求路由可以命中多个 LOCATION 配置块, 此时存在一个复杂的优先级关系 (优先级相同的 LOCATION 配置块先命中的先分流):
       1. location =  uri {} 命中结果的优先级最高
       2. location    uri {} 完全命中结果的优先级次高
       3. location ^~ uri {} 命中结果的优先级一般
       4. location ~  uri {} 命中结果的优先级一般
       4. location ~* uri {} 命中结果的优先级一般
       6. location    uri {} 部分命中结果的优先级较低
       7. location    /   {} 命中结果的优先级最低

""""""""" 演示 NginX 软件的配置文件内, LOCATION 配置块的使用办法
[root ~]# mkdir -p /var/nginx && chown -R nginx:nginx /var/nginx
[root ~]# sudo -u nginx mkdir -p /var/nginx/foo
[root ~]# sudo -u nginx touch /var/nginx/foo/demo
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...

    location / {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        root /var/nginx;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
错误页面
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HTTP/HTTPS 协议层使用三位数字代码表示网页服务器超文本传输协议的响应状态, 简称 HTTP 状态码
HTTP 状态码的注册表由互联网号码分配局（Internet Assigned Numbers Authority）维护, 其大体划分如下:

    •  1xx 状态码代表客户端请求已被服务端接受, 但需要服务端继续处理
    •  2xx 状态码代表客户端请求已被服务端接受, 且形成相应的响应结果
    •  3xx 状态码代表客户端请求需要重定向
    •  4xx 状态码代表客户端请求错误
    •  5xx 状态码代理服务端响应错误

HTTP 状态码的注册表登记部分如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ HTTP/HTTPS Status                    │ Code    │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ Continue                             │ 100     │ 服务端临时响应使用的 HTTP 状态码, 客户端应当继续发送请求的剩余部分
│ Switching Protocols                  │ 101     │ 服务端已经理解客户端的请求, 但要求客户端更换请求协议
│ Processing                           │ 102     │ 服务端临时响应使用的 HTTP 状态码, 服务端正在处理请求, 客户端需要等待响应
│ OK                                   │ 200     │ 服务端响应成功
│ Created                              │ 201     │ 服务端响应成功, 相应资源已经依据请求的需要而建立
│ Accepted                             │ 202     │ 服务端已经接受请求, 但尚未处理请求
│ Non-Authoritative Information        │ 203     │ 服务端已成功处理请求，但响应头是来自第三方服务端的拷贝
│ No Content                           │ 204     │ 服务端已成功处理请求，但返回内容仅包含响应头而没有包体
│ Reset Content                        │ 205     │ 服务端已成功处理请求，但返回内容仅包含响应头而没有包体 (客户端重置文档视图)
│ Partial Content                      │ 206     │ 服务端已成功处理部分 GET 请求
│ Multiple Choices                     │ 300     │ 被请求的资源有一系列可供选择的回馈信息, 客户端能够自行选择一个地址进行重定向
│ Moved Permanently                    │ 301     │ 被请求的资源永久移动到新位置
│ Moved Temporarily                    │ 302     │ 被请求的资源临时移动到新位置
│ Bad Request                          │ 400     │ 客户端发送的请求存在参数错误
│ Unauthorized                         │ 401     │ 客户端发送的请求需要用户验证
│ Forbidden                            │ 403     │ 客户端发送的请求出现越权情况, 服务端拒绝执行请求
│ Not Found                            │ 404     │ 服务端未发现请求要求的资源
│ Method Not Allowed                   │ 405     │ 服务端不允许请求当前使用的方法 (GET/ POST/ PUT/ DELETE)
│ Internal Server Error                │ 500     │ 服务端内部错误, 标记请求触发到一个 BUG 漏洞
│ Not Implemented                      │ 501     │ 服务端不满足请求当前的需要
│ Bad Gateway                          │ 502     │ 客户端无法连接到服务端
│ Service Unavailable                  │ 503     │ 服务端性能过载, 并导致无法响应请求
│ Gateway Timeout                      │ 504     │ 客户端连接服务端时出现超时
│ HTTP Version Not Supported           │ 505     │ HTTP 版本错误
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

error_page code ... [ =code ] uri;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error_page 配置项是错误页面配置项, 支持在 HTTP 配置块, SERVER 配置块, LOCATION 配置块内编写
error_page 配置项的使用要点如下:

    •  服务端响应标头的状态代码能够匹配到 code ... 列表中的任何代码时, 请求被重定向到 uri 路由
    •  error_page 配置项用于重定向的路由规则, 在不用 (/) 作为起始符号时, 会触发软件的显式重定向 (URL 信息会被改写, HTTP 302)
    •  error_page 配置项用于重定向的路由规则, 在使用 (/) 作为起始符号时, 仅触发软件的隐式重定向 (URL 信息保持不变, 但页面内容被改写)

""""""""" 演示 NginX 软件的配置文件内, error_page 配置项的使用办法
[root ~]# sudo -u nginx mkdir -p /var/nginx/error_page
[root ~]# sudo -u nginx echo 'HTTP Status Code 403' > /var/nginx/error_page/403.html
[root ~]# sudo -u nginx echo 'HTTP Status Code 404' > /var/nginx/error_page/404.html
[root ~]# sudo -u nginx echo 'HTTP Status Code 5xx' > /var/nginx/error_page/5xx.html
[root ~]# vim /etc/nginx/nginx.conf
... ...
... ...
http {
    ... ...
    ... ...

    error_page 403 /error_page/403.html;
    error_page 404 /error_page/404.html;
    error_page 500 501 502 503 504 505 /error_page/5xx.html;
    root /var/nginx;
}
... ...
... ...
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
重构日志
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━





