  ___,                                                                              _    _    _ 
 /   |     |             o          o                        o                     | |  | |  | |
|    |   __|   _  _  _       _  _       , _|_  ,_    __, _|_     __   _  _         | |  | |  | |
|    |  /  |  / |/ |/ |  |  / |/ |  |  / \_|  /  |  /  |  |  |  /  \_/ |/ |      _ |/ _ |/ _ |/ 
 \__/\_/\_/|_/  |  |  |_/|_/  |  |_/|_/ \/ |_/   |_/\_/|_/|_/|_/\__/   |  |_/    \_/\/\_/\/\_/\/
                                                                                                
                                                                                                
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
LOCATION 配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
LOCATION 配置块是 SERVER 配置块的子配置块, 主要用于定义软件在 HTTP/HTTPS 协议层的路由分发规则, 其具体数量不定
LOCATION 配置块的内嵌配置项十分丰富, 但本文档仅介绍最基本的, 用于构建静态资源站点的配置项

┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   LOCATION PART {                                                                                                   ┊
┊       ... ...                                                                                                       ┊
┊       LOCATION IF PART {                                                                                            ┊
┊           ... ...                                                                                                   ┊
┊       }                                                                                                             ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

LOCATION 配置块能够内嵌的子配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ location URI {}                      │         │ 定义 LOCATION 配置块的路由规则, 并标记 LOCATION 配置块的作用域
│ root /PATH/TO/DIR;                   │         │ 定义 LOCATION 配置块的根目录
│ alias /PATH/TO/DIR;                  │         │ 定义 LOCATION 配置块的根目录
│ index index.html;                    │    √    │ 定义 LOCATION 配置块的根文件为 /PATH/TO/DIR/index.html 资源文件
│ index FILENAME;                      │         │ 定义 LOCATION 配置块的根文件为 /PATH/TO/DIR/FILENAME 资源文件
│ autoindex on;                        │         │ 缺失 LOCATION 配置块的根文件时, 展示 LOCATION 配置块的根目录结构
│ autoindex off;                       │    √    │ 缺失 LOCATION 配置块的根文件时, 隐藏 LOCATION 配置块的根目录结构
│ autoindex_exact_size on;             │    √    │ 展示 LOCATION 配置块的根目录结构时, 使用精确到 byte 的单位描述文件大小
│ autoindex_exact_size off;            │         │ 展示 LOCATION 配置块的根目录结构时, 使用符合使用习惯的容量单位描述文件大小
│ autoindex_localtime on;              │         │ 展示 LOCATION 配置块的根目录结构时, 使用服务端的时间戳
│ autoindex_localtime off;             │    √    │ 展示 LOCATION 配置块的根目录结构时, 使用客户端的时间戳
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

基于 LOCATION 配置块定义资源根目录时, 还请注意:

    •  LOCATION 配置块内不允许同时使用 root 配置项与 alias 配置项, 两者互斥冲突
    •  LOCATION 配置块内使用 root  配置项定义资源根目录时, 客户端发出的请求实际命中为 /PATH/TO/DIR/$uri 的资源内容
    •  LOCATION 配置块内使用 alias 配置项定义资源根目录时, 具有一定的路径除重要求, 不建议使用该配置项

location [ option ] uri {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
location 配置项能够定义 LOCATION 配置块的路由规则, 并标记 LOCATION 配置块的作用域, 请求路由从左到右匹配路由规则
location 配置项常见的编写方法如下:

    •  location =  uri {}                       uri 仅允许使用常量编写, 请求路由精确且完整的命中规则才能生效
    •  location    uri {}                       uri 仅允许使用常量编写, 请求路由命中规则时生效
    •  location ^~ uri {}                       uri 仅允许使用常量编写, 请求路由命中规则时生效
    •  location ~  uri {}                       uri 允许使用正则表达式编写, 请求路由在匹配该规则时要区分字符大小写
    •  location ~* uri {}                       uri 允许使用正则表达式编写, 请求路由在匹配该规则时不区分字符大小写
    •  location    /   {}                       表示通用匹配, 无论请求路由如何都会命中规则

阅读上述表格时, 还请注意:

    •  配置块定义路由规则时, 不管使用常量编写还是使用正则表达式编写, 总是需要使用符号 (/) 开头, 以便命中请求路由中的起始 (/) 符号
    •  如果使用正则表达式定义路由规则, 建议使用双引号 ("") 修正正则表达式, 避免配置文件解析错误
    •  配置块使用 root 关键字定义根目录 /PATH/TO/DIR 信息, 则请求 URI 的实际访问对象为 /PATH/TO/DIR/URI
    •  若请求路由可以命中多个 LOCATION 配置块, 此时存在一个复杂的优先级关系 (优先级相同的 LOCATION 配置块先命中的先分流):
       1. location =  uri {} 命中结果的优先级最高
       2. location    uri {} 完全命中结果的优先级次高
       3. location ^~ uri {} 命中结果的优先级一般
       4. location ~  uri {} 命中结果的优先级一般
       4. location ~* uri {} 命中结果的优先级一般
       6. location    uri {} 部分命中结果的优先级较低
       7. location    /   {} 命中结果的优先级最低

""""""""" 演示 NginX 软件的配置文件内, LOCATION 配置块的使用办法
[root ~]# mkdir -p /var/nginx && chown -R nginx:nginx /var/nginx
[root ~]# sudo -u nginx mkdir -p /var/nginx/foo
[root ~]# sudo -u nginx touch /var/nginx/foo/demo
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    location / {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        root /var/nginx;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
IF 配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
IF 配置块主要用于定义软件在 HTTP/HTTPS 协议层的逻辑条件跳转, 其具体数量不定, 且内嵌配置项多复用于其他配置项, 本文档仅罗列常见的一部分
IF 配置块根据自身位置的不同, 可以区分为下述两种:

    •    SERVER IF 配置块, 作为 SERVER   配置块的子配置块存在
    •  LOCATION IF 配置块, 作为 LOCATION 配置块的子配置块存在

┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   SERVER IF PART {                                                                                                  ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘
┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   LOCATION IF PART {                                                                                                ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

if (condition) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if 配置项能够定义一个条件表达式, 条件表达式的判断结果为真, 则执行 IF 配置块的内嵌配置项, 否则跳过 IF 配置块
if 配置项被官方视为邪恶 (evil) 的代表, 建议结合 nginx-echo-module 第三方模块使用这个配置项, 以便基于 echo 指令把条件规则调试准确
if 配置项常用简洁模式判断文件系统的属性:

    •  if ( -e /path/to/dest) {}                 /path/to/dest 是一个真实存在的目录/ 文件时, 条件判断为真
    •  if ( -d /path/to/dirc) {}                 /path/to/dirc 是一个真实存在的目录时, 条件判断为真
    •  if ( -f /path/to/file) {}                 /path/to/file 是一个真实存在的文件时, 条件判断为真
    •  if ( -x /path/to/dest) {}                 /path/to/dest 是一个真实存在且具有可执行权限的目录/ 文件时, 条件判断为真
    •  if (!-e /path/to/dest) {}                 /path/to/dest 是一个并不存在的目录/ 文件时, 条件判断为真
    •  if (!-d /path/to/dirc) {}                 /path/to/dirc 是一个并不存在的目录时, 条件判断为真
    •  if (!-f /path/to/file) {}                 /path/to/file 是一个并不存在的文件时, 条件判断为真
    •  if (!-x /path/to/dest) {}                 /path/to/dest 是一个并不存在的目录/ 文件, 或其没有可执行权限时, 条件判断为真

if 配置项常用正则表达式判断文件系统的属性:

    •  if ($request_uri =   "conexp") {}         使用常量表达式 conexp 编写匹配规则, 若变量等于规则, 条件判断为真
    •  if ($request_uri ~   "regexp") {}         使用正则表达式 regexp 编写匹配规则, 若变量区分大小写时命中规则, 条件判断为真
    •  if ($request_uri ~*  "regexp") {}         使用正则表达式 regexp 编写匹配规则, 若变量不分大小写时命中规则, 条件判断为真
    •  if ($request_uri !=  "conexp") {}         使用常量表达式 conexp 编写匹配规则, 若变量不等于规则, 条件判断为真
    •  if ($request_uri !~  "regexp") {}         使用正则表达式 regexp 编写匹配规则, 若变量区分大小写时未命中规则, 条件判断为真
    •  if ($request_uri !~* "regexp") {}         使用正则表达式 regexp 编写匹配规则, 若变量不分大小写时未命中规则, 条件判断为真

正则表达式的标准语法登记如下
┌─────────────┬──────────────────────────────────┬─────────────────────────────────────────────────────────────────────
│ ^           │ "^A"         (eg: "Apache"   )   │ 在字符串的开头处匹配指定的 'a' 字符 1 次
│ $           │ "a$"         (eg: "Catalina" )   │ 在字符串的结尾处匹配指定的 'a' 字符 1 次
│ .           │ "."          (eg: "NginX1.14")   │ 在字符串的任意位置匹配任意的字符 1 次
│ *           │ "a*"         (eg: "ZooKeeper")   │ 在字符串的任意位置匹配指定的 'a' 字符 0 次或者 1 次或者多次 (匹配任意次数)
│ ?           │ "a?"         (eg: "Tomcat"   )   │ 在字符串的任意位置匹配指定的 'a' 字符 0 次或者 1 次 (最多匹配 1 次)
│ +           │ "s+"         (eg: "Business" )   │ 在字符串的任意位置连续匹配指定的 's' 字符 1 次或者多次 (最少匹配 1 次)
│ {}          │ "s{2}"       (eg: "Business" )   │ 在字符串的任意位置连续匹配指定的 's' 字符 2 次 (连续匹配的次数由 {} 指定)
│ []          │ "[a-z]"      (eg: "Business" )   │ 在字符串的任意位置匹配指定范围 'a', 'b', ..., 'z' 以内的字符 1 次
│ [^]         │ "[^af-z]"    (eg: "Business" )   │ 在字符串的任意位置匹配指定范围 'a', 'f', ..., 'z' 以外的字符 1 次
│ ()          │ "^(.+)(ss)$" (eg: "Business" )   │ 对完整的正则表达式进行分组匹配
│ |           │ "^(T|B)"     (eg: "Tomorrow" )   │ 在字符串的开头处匹配指定的 'T' 字符或者 'B' 字符 1 次
│ [[:digit:]] │                                  │ 匹配任意数字字符 1 次, 等于正则表达式 "[0-9]"
│ [[:lower:]] │                                  │ 匹配任意小写字符 1 次, 等于正则表达式 "[a-z]"
│ [[:upper:]] │                                  │ 匹配任意大写字符 1 次, 等于正则表达式 "[A-Z]"
│ [[:space:]] │                                  │ 匹配空格字符 1 次
│ [[:punct:]] │                                  │ 匹配标点字符 1 次
│ [[:alpha:]] │                                  │ 匹配任意字符 1 次, 等于正则表达式 '.'
└─────────────┴──────────────────────────────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, IF 配置块的使用办法
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    location ~* "^/pay/([a-z0-9\-\_\.]*)" {
        if ($request_uri ~* "^/pay/api")        { proxy_pass http://pay-api;        }
        if ($request_uri ~* "^/pay/signature")  { proxy_pass http://pay-signature;  }
        if ($request_uri ~* "^/pay/sms")        { proxy_pass http://pay-sms;        }
        if ($request_uri ~* "^/pay/quickmoney") { proxy_pass http://pay-quickmoney; }
        return 404;
    }
    location ~* "^/iso/([a-z0-9\-\_\.]*)" {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        root /mnt;
        if (!-e $request_filename) {
            echo "this is a demo page for 404 error";
        }
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



