 , __                                                                 __     ___,         _    _ 
/|/  \                            ()                o                /  \   /   |        | |  | |
 |___/ ,_    __                   /\  _   ,_            __   _      | __ | |    |        | |  | |
 |    /  |  /  \_/\/  |   |      /  \|/  /  |  |  |_|  /    |/      |/  \| |    |      _ |/ _ |/ 
 |       |_/\__/  /\_/ \_/|/    /(__/|__/   |_/ \/  |_/\___/|__/     \__/\_/\__/\_/    \_/\/\_/\/
                         /|                                                                      
                         \|                                                                      
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何防止 DDoS (Distributed Denial of Service) 攻击?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
DDoS 攻击的中文翻译为 "分布式拒绝服务攻击"
DDoS 攻击通常是指攻击者向服务提交大量请求使得服务长期处于超负荷运行状态, 由此阻断其他用户访问服务, 从本质上讲 DDoS 攻击是一种流量攻击
DDoS 攻击的应对方案有:

    •  使用高防服务器, 限制 SYN/ ICMP 网络流量
    •  使用 DDoS 流量清洗方案
    •  使用 CDN (Content Delivery Network) 服务降低网络阻塞瓶颈
    •  使用 NginX 软件自带的限流功能模块 (请谨慎使用): 连接限流 (http_limit_conn_module), 访问限流 (http_limit_req_module)

HTTP 连接限流功能模块 http_limit_conn_module 常用配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ limit_conn_zone ...;                 │         │ 仅允许在 HTTP 配置块内编写, 分配一块内存区域用于实现连接限流管理
│ limit_conn ZONE NUMBER;              │         │ 在需要的 SERVER 配置块内编写, 设置相应键值的并发连接上限
│ limit_conn_dry_on on;                │         │ 开启连接限流功能模块的测试运行模式
│ limit_conn_dry_on off;               │    √    │ 关闭连接限流功能模块的测试运行模式
│ limit_conn_status 503;               │    √    │ 触发连接限流时, 使用 503  作为服务响应的 HTTP 状态码
│ limit_conn_status CODE;              │         │ 触发连接限流时, 使用 CODE 作为服务响应的 HTTP 状态码
│ limit_conn_log_level error;          │    √    │ 触发连接限流时, 相应日志的输出等级为错误等级 (error)
│ limit_conn_log_level LEVEL;          │         │ 触发连接限流时, 相应日志的输出等级为 LEVEL 等级
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

limit_conn_zone key zone=name:size;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
limit_conn_zone 配置项仅允许在 HTTP 配置块内编写, 用于定义连接限流管理用的内存区域 (不代表访问 HTTP 服务的站点会被限流)
limit_conn_zone 配置项的组成元素有
::  limit_conn_zone                              固定的关键字, 标记这是一条连接限流管理的配置项
::  key                                          必要的关键字, 指定连接限流的对象, 官方建议使用 $binary_remote_addr 作为关键字
::  zone=name:size                               必要的配置项, 分配一个名为 name 的内存区域, 该区域由 limit_conn 配置项调用

HTTP 功能模块 http_limit_req_module 常用配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ limit_req_zone ...;                  │         │ 仅允许在 HTTP 配置块内编写, 分配一块内存区域用于实现访问限流管理
│ limit_req zone=NAME burst=NUM;       │         │ 在需要的 SERVER 配置块内编写, 设置相应键值的访问数量上限
│ limit_req_dry_on on;                 │         │ 开启访问限流功能模块的测试运行模式
│ limit_req_dry_on off;                │    √    │ 关闭访问限流功能模块的测试运行模式
│ limit_req_status 503;                │    √    │ 触发访问限流时, 使用 503  作为服务响应的 HTTP 状态码
│ limit_req_status CODE;               │         │ 触发访问限流时, 使用 CODE 作为服务响应的 HTTP 状态码
│ limit_req_log_level error;           │    √    │ 触发访问限流时, 相应日志的输出等级为错误等级 (error)
│ limit_req_log_level LEVEL;           │         │ 触发访问限流时, 相应日志的输出等级为 LEVEL 等级
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

limit_req_zone key zone=name:size rate=speed;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
limit_req_zone 配置项仅允许在 HTTP 配置块内编写, 用于定义访问限流管理用的内存区域 (不代表访问 HTTP 服务的站点会被限流)
limit_req_zone 配置项的组成元素有
::  limit_req_zone                               固定的关键字, 标记这是一条访问限流管理的配置项
::  key                                          必要的关键字, 指定访问限流的对象, 官方建议使用 $binary_remote_addr 作为关键字
::  zone=name:size                               必要的配置项, 分配一个名为 name 的内存区域, 该区域由 limit_req 配置项调用
::  rate=speed                                   必要的配置项, 设置访问请求的速率限制为 speed (即多少时间内处理一次访问请求)

使用 limit_req_zone 配置项时, 还请注意:

    •  速率限制的 speed 参数可使用 [[:digit:]]+r/s 格式编写, 表示每秒钟仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略
    •  速率限制的 speed 参数可使用 [[:digit:]]+r/m 格式编写, 表示每分钟仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略
    •  速率限制的 speed 参数可使用 [[:digit:]]+r/h 格式编写, 表示每小时仅处理 [[:digit:]]+ 次访问, 期间多余访问会被忽略

""""""""" 演示 NginX 软件的配置文件内, 如何启用限流管理
[root ~]# vim /etc/nginx/nginx.conf
http {
    ... ...
    ... ...
    limit_conn_zone $binary_remote_addr zone=conn_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_ip:10m rate=30r/m;
}
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    limit_conn conn_ip 100;                      | 限制每个 $binary_remote_addr 发起的并发连接上限为 100 个连接
    limit_req zone=req_ip burst=5;               | 限制每个 $binary_remote_addr 发起的访问速率上限为每两秒钟一次访问
}                                                | 某个客户端地址在两秒钟内发起超过 5 个请求, 则直接返回 503 状态码
--------------------------------------------------------------------------------------------------------------------- ✻



