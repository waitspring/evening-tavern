  ___,                                                                              _ 
 /   |     |             o          o                        o                     | |
|    |   __|   _  _  _       _  _       , _|_  ,_    __, _|_     __   _  _         | |
|    |  /  |  / |/ |/ |  |  / |/ |  |  / \_|  /  |  /  |  |  |  /  \_/ |/ |      _ |/ 
 \__/\_/\_/|_/  |  |  |_/|_/  |  |_/|_/ \/ |_/   |_/\_/|_/|_/|_/\__/   |  |_/    \_/\/
                                                                                      
                                                                                      
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的日常管理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的日常管理工具有:

    •  /usr/sbin/nginx           --  软件的可执行程序文件
    •  /etc/nginx/nginx.conf     --  软件的主配置文件
    •  /etc/nginx/conf.d/*.conf  --  软件的子配置文件 (每个功能点通常单独使用各自的子配置文件)

/usr/sbin/nginx [option...]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/sbin/nginx 可执行文件是软件的日常管理工具, 默认用于启动 NginX 软件的服务进程
/usr/sbin/nginx 可执行文件常用的可选选项有
::  -c /PATH/TO/CONF                             配置文件选项, 人工指定 /PATH/TO/CONF 文件作为软件的主配置文件
::  -t                                           配置检验选项, 检查配置文件内是否存在语法错误
::  -q                                           静默输出选项, 配合 -t 选项使用, 屏蔽错误日志以外的输出信息
::  -s stop                                      快速的停止服务, 其本质是基于 /var/run/nginx.pid 文件向进程发送 TERM 信号
::  -s quit                                      优雅的停止服务, 其本质是基于 /var/run/nginx.pid 文件向进程发送 QUIT 信号
::  -s reload                                    重新加载配置文件, 配置项存在错误则自动阻断加载动作, 原有服务不会受到影响
::  -s reopen                                    重新打开日志文件, 原有日志文件被归档保存
::  -v                                           版本查询选项, 查询软件版本信息
::  -V                                           编译查询选项, 查询软件编译信息

""""""""" 演示 NginX 软件的日常管理办法
[root ~]# nginx -V
NginX version: NginX/1.8.1
built by GCC 4.8.5           (23 Jun 2015)
built with OpenSSL 1.0.1     (11 Feb 2013)
TLS SNI support enabled
... ...
[root ~]# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successfully
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的配置文件
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的配置文件包含配置块与配置项, 其中配置块可以内嵌配置块与配置项
NginX 软件的配置文件应当遵循下述基本语法规则:

    •  配置项需要使用英文分号 (;) 作为结尾
    •  配置项可以使用英文井号 (#) 作为注释
    •  配置项可以使用货币符号 ($) 作为变量声明 (前提是配置项底层依赖的功能模块支持使用变量)
    •  配置项如果存在多个赋值, 则每个赋值之间使用空格符号 ( ) 作为分隔
    •  配置项如果存在携带单位的赋值, 其可选单位有:
        •  容量单位  --  千字节 (k), 兆字节 (m)
        •  时间单位  --  毫秒 (ms), 秒 (s), 分 (m), 时 (h), 天 (d), 周 (w), 月 (M), 年 (y)

NginX 软件的配置文件可以拆分为下述不同功能部分:

    •  基础配置项是配置文件内务必存在的配置项, 主要用于定义软件的进程属性
    •  事件模型配置块是配置文件内务必存在的配置块, 主要用于定义软件的事件处理机制
    •  HTTP 配置块
    •  STREAM 配置块
    •  邮件配置块

┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   BASIC PART                                                                                                        ┊
┊   ... ...                                                                                                           ┊
┊                                                                                                                     ┊
┊   EVENT PART {                                                                                                      ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
┊   HTTP PART {                                                                                                       ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
┊   STREAM PART {                                                                                                     ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
┊   MAIL PART {                                                                                                       ┊
┊       ... ...                                                                                                       ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
基础配置项
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
基础配置项是配置文件内务必存在的配置项, 主要用于定义软件的进程属性, 部分基础配置项存在默认值, 部分基础配置项相互之间存在依赖关系
基础配置项登记如下

┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ daemon on;                           │    √    │ 开启软件进程的守护工作模式
│ daemon off;                          │         │ 关闭软件进程的守护工作模式, 软件启动之后进程将始终占据终端, 无法转为后台进程
│ master_process on;                   │    √    │ 开启软件进程的管理工作模式, 服务区分出 master/ worker 不同的进程
│ master_process off;                  │         │ 关闭软件进程的管理工作模式, 服务仅拉起 worker 类型的进程
│ user USRNAME GRPNAME;                │         │ 限制软件进程的用户与用户组, 用户组为配置项的可选值
│ pid /PATH/TO/FILE;                   │         │ 配置软件进程的进程文件为 /PATH/TO/FILE
│ lock_file /PATH/TO/FILE;             │         │ 配置软件进程的 accept 锁文件为 /PATH/TO/FILE
│ working_directory /PATH/TO/DIR;      │         │ 限制软件进程的 coredump 文件的寄存目录为 /PATH/TO/DIR
│ worker_rlimit_core SIZE;             │         │ 限制软件进程的 coredump 文件的单个容量大小为 SIZE (单位: k/m)
│ worker_rlimit_nofile NUM;            │         │ 限制软件进程允许打开最多 NUM 个文件句柄
│ worker_priority 0;                   │    √    │ 配置软件进程的优先级权重为 0 (指定进程的 nice 权重值)
│ worker_priority NICE;                │         │ 配置软件进程的优先级权重为 NUM
│ worker_processes 1;                  │    √    │ 配置软件进程的数量为 1 个进程
│ worker_processes NUM;                │         │ 配置软件进程的数量为 NUM 个进程
│ worker_cpu_affinity MASK;            │         │ 配置软件进程的 CPU 亲和特性 (绑定进程到对应的 CPU 核心上不做切换)
│ ssl_engine DEVNAME;                  │         │ 配置软件进程使用 DEVNAME 作为 SSL 协议的硬件加速设备
│ error_log /PATH/TO/FILE;             │    √    │ 设置软件的错误日志等级为 ERROR 且输出目标为 /PATH/TO/FILE 日志文件
│ error_log /PATH/TO/FILE LEVEL;       │         │ 设置软件的错误日志等级为 LEVEL 且输出目标为 /PATH/TO/FILE 日志文件
│ include /PATH/TO/FILE;               │         │ 加载 /PATH/TO/FILE 文件内的配置块与配置项
│ env PAR=VALUE;                       │         │ 设置变量 PAR 的值为 VALUE
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

阅读上述表格时, 还请注意:

    •  使用命令 $(openssl engine -t) 能够测试当前主机是否存在 SSL 协议的硬件加速设备
    •  软件进程的优先级权重有可选范围 [-20, 19], 且数值越小优先级越大, 但不建议把权重配置在 [-20, -15] 的范围内, 这是操作系统的权重
    •  指定 coredump 文件的寄存目录时, 寄存目录应提前存在, 否则使用普通用户权限的 worker 进程无法正常工作

错误日志存在下述输出等级:

    •  debug  --  系统调试信息, 数据输出量巨大且繁杂, 需要在软件编译时加入 --with-debug 选项
    •   info  --  常规记录的普通事件
    •   warn  --  风险警告等级的事件
    •  error  --  较高风险等级的问题, 已经干扰软件的正常运行
    •   crit  --  较高风险等级的问题, 已经干扰软件的正常运行
    •  alert  --  次高风险等级的问题, 务必需要安排人工干预
    •  emerg  --  最高风险等级的问题, 可能造成软件崩溃

""""""""" 演示 NginX 软件的配置文件内, 核心配置项的使用办法
[root ~]# sudo -u nginx mkdir -p /tmp/nginx
[root ~]# vim /etc/nginx/nginx.conf
user nginx nginx;
pid /var/run/nginx.pid;
lock_file /var/run/nginx.lock;
error_log /var/log/nginx/error.log error;
working_directory /tmp/nginx;
worker_rlimit_core 1m;
worker_rlimit_nofile 65535;
worker_processes 8;
worker_cpu_affinity 00000001 00000010 00000100 00001000
                    00010000 00100000 01000000 10000000;
... ...
... ...
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
事件模型配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
事件模型配置块是配置文件内务必存在的配置块, 主要用于定义软件的事件处理机制, 内嵌的部分配置项存在默认值, 部分配置项相互之间存在依赖关系
事件模型配置块内嵌的配置项登记如下

┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ use select;                          │         │ 要求软件使用 select 事件驱动模型, 该事件驱动模型的性能瓶颈明显
│ use poll;                            │         │ 要求软件使用 poll 事件驱动模型, 该事件驱动模型的性能瓶颈明显
│ use epoll;                           │         │ 要求软件使用 epoll 事件驱动模型, 该事件驱动模型的性能最优
│ worker_connections NUM;              │         │ 限制软件每个 worker 进程的连接并发量为 NUM 个连接
│ accept_mutex on;                     │    √    │ 开启软件的 accept 锁机制, 这是一种负载均衡机制
│ accept_mutex off;                    │         │ 关闭软件的 accept 锁机制
│ accept_mutex_delay 500ms;            │    √    │ 设置软件取 accept 锁失败之后, 再次取锁的间隔时间为 500ms
│ accept_mutex_delay TIME;             │         │ 设置软件取 accept 锁失败之后, 再次取锁的间隔时间为 TIME (单位: ms)
│ multi_accept on;                     │         │ 开启通信连接的批量建立机制
│ multi_accept off;                    │    √    │ 关闭通信连接的批量建立机制
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

阅读上述表格时, 还请注意:

    •  不同的事件驱动模型之间, 存在下述区别:
        •  select 模型使用轮询算法遍历全部 I/O 信息流, 连接越多时 I/O 信息流就越多, 轮询算法的效率越差
        •    poll 模型使用轮询算法遍历全部 I/O 信息流, 连接越多时 I/O 信息流就越多, 轮询算法的效率越差, 但该模型不设置连接上限
        •   epoll 模型使用中间文件缓存连接信息的元数据, 基于连接信息收集 I/O 信息流中实际存在的事件, 这种设计思路使得该模型性能优越
    •  强烈建议用户使用 epoll 事件驱动模型, 这是 NginX 软件具备卓越性能的主要因素

""""""""" 演示 NginX 软件的配置文件内, 事件配置项的使用办法
[root ~]# vim /etc/nginx/nginx.conf
... ...
... ...
events {
    use epoll;
    worker_connections 65535;
    accept_mutex_delay 100ms;
    multi_accept on;
}
... ...
... ...
--------------------------------------------------------------------------------------------------------------------- ✻



