   _                                                            
  | |                         |                 o               
  | | _  _  _|_  ,_    __   __|          __ _|_     __   _  _   
_ |/ / |/ |  |  /  |  /  \_/  |  |   |  /    |  |  /  \_/ |/ |  
\_/\/  |  |_/|_/   |_/\__/ \_/|_/ \_/|_/\___/|_/|_/\__/   |  |_/
                                                                
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的发展历程
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件是互联网生态中最常见的网络服务端软件, 全称 Engine X 寓意为适应 X 世代互联网的工程软件
NginX 软件由莫斯科的开源工程师西索耶夫 (Igor Sysoev) 最先发布, 目前由刷新网络公司 (F5 Network) 负责迭代与维护

NginX 软件的发展历程很多时候就是一笔糊涂账
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**  2001 年, 互联网领域内 C10K 性能瓶颈日益显著
**  2002 年, 漫步者传媒 (Sambler Media) 在职员工西索耶夫在业余时间内使用 C 语言编写出 NginX 软件
**  2003 年, 西索耶夫在公司部门领导的支持下, 在工作时间继续更新迭代 NginX 软件, 这为日后双方的软件版权纠纷埋下伏笔
**  2004 年, 西索耶夫使用 BSD 协议开源整个 NginX 软件项目
**  2009 年, 西索耶夫在莫斯科创建 NGINX 发展社区, 开始引导 NginX 软件的开源与协作
**  2011 年, 西索耶夫在旧金山创建 NGINX 商业公司, 专门从事 NginX 软件的迭代与维护, 并对外提供 NginX 软件的商用付费服务
**  2019 年, 刷新网络公司收购 NGINX 商业公司, 获取到 NginX 软件的版权
**  2020 年, 刷新网络公司划分 NginX 软件的商用版本 (NginX Plus) 和社区版本 (NginX Community)
**  2021 年, 漫步者传媒针对西索耶夫发起经济诉讼

NginX 软件的版本编号使用单双号隔离的发展策略:

    •  使用单数版本编号的 NginX 软件作为开发使用的调试版本 (mainline version), 用于功能与特性的添加测验
    •  使用双数版本编号的 NginX 软件作为稳定发布的产线版本 (stable version), 提供给业务环境做部署使用的同时, 不断修复软件故障
    •  根据惯例, 四月份推进双数版本编号, 五月份推进单数版本编号

┌────────────┬──────────┬─────────────────────────────────────────────────────────────────────────────────────────────┐
│            │          │ • map directive                                                                             │
│ 2011-04-12 │ 1.0.0    │ • keepalive connection                                                                      │
│            │          │ • nginx manual page                                                                         │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • IPv6 addresses                                                                            │
│ 2012-04-23 │ 1.2.0    │ • ECDHE key exchange ciphers                                                                │
│            │          │ • ciphers cache loader run time decrease                                                    │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • OCSP stapling                                                                             │
│ 2013-04-24 │ 1.4.0    │ • SPDY                                                                                      │
│            │          │ • connection proxy                                                                          │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • UNIX domain socket                                                                        │
│ 2014-04-24 │ 1.6.0    │ • SPDY 3.1                                                                                  │
│            │          │ • request module                                                                            │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • SSL certificate verification backend                                                      │
│ 2015-04-21 │ 1.8.0    │ • hash load balancing method                                                                │
│            │          │ • experimental thread pool                                                                  │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • HTTP/2                                                                                    │
│ 2016-04-26 │ 1.10.0   │ • stream module                                                                             │
│            │          │ • dynamic module                                                                            │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • HTTP/2 fix                                                                                │
│ 2017-04-12 │ 1.12.0   │ • SSL certificate of different type                                                         │
│            │          │ • improved stream module and dynamic module                                                 │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • HTTP/2 push                                                                               │
│ 2018-04-17 │ 1.14.0   │ • RPC proxy module                                                                          │
│            │          │ • mirror module                                                                             │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • UDP proxying improvement                                                                  │
│ 2019-04-23 │ 1.16.0   │ • SSL certificate dynamic loading                                                           │
│            │          │ • TLS 1.3 supporting                                                                        │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • TCP stream                                                                                │
│ 2020-04-21 │ 1.18.0   │ • dry run mode in limit_req and limit_conn directive                                        │
│            │          │ • auth_delay directive                                                                      │
├────────────┼──────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│            │          │ • OCSP validation of client SSL certificate                                                 │
│ 2021-04-20 │ 1.20.0   │ • ssl_reject_handshake and ssl_conf_command directive                                       │
│            │          │ • cookie flags handling                                                                     │
└────────────┴──────────┴─────────────────────────────────────────────────────────────────────────────────────────────┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的功能特性
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
网络服务端软件经过多年的发展与演变, 如今已经可以给出一个相对完整的定义:

    •  符合 REST (Representational State Transfer) 架构的设计风格, 基于 URI (Uniform Resource Identifier) 标准提供网络服务
    •  能够响应 HTTP/ HTTPS/ IMAP/ POP3/ SMTP/ FTP/ SSL 在内一种或多种七层网络协议的请求
    •  能够细分为协议型服务端软件与容器型服务端软件, 前者更偏重满足通信协议的要求, 后者则偏重满足编程语言的要求

网络服务端软件的细分类型详细说明如下表
┌────────────┬──────────┬──────────────────────────────────────────────────────────────────────────────────────────────
│            │ HTTPD    │ 注重稳定的协议型服务端软件, 早期与 PHP 编程语言有良好的互动关系
│            ├──────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│ PROTOCOL   │ NginX    │ 注重性能的协议型服务端软件, 目前与各种主流的编程语言都有良好的互动关系 (HTML5, Lua, C/C++, ...)
│            ├──────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│            │ IIS      │ 内置于 Windows Server 操作系统中捆绑销售的协议型服务端软件, 使用人数较少, 一般不太常见
├────────────┼──────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│            │ Tomcat   │ 轻量级容器型服务端软件, 能较好的支持 Java 编程语言
│ CONTAINER  ├──────────┼──────────────────────────────────────────────────────────────────────────────────────────────
│            │ Jetty    │ 轻量级容器型服务端软件, 能较好的支持 Java 编程语言
└────────────┴──────────┴──────────────────────────────────────────────────────────────────────────────────────────────

截止到 2021 年的年末, 天网科技 (Netcraft) 发布的互联网服务器调研报告 (Web Server Survey) 显式:

    [ 37.89% ] ▲  NginX 软件凭借 37.89% 的市场占有率已是目前全球使用最广泛的网络服务端软件, 其市场占有率仍然处于进一步上升趋势
    [ 29.57% ] ▽  HTTPD 软件凭借 29.57% 的市场占有率成为目前全球使用第二广的网络服务端软件, 但市场占有率处于下降趋势
    [ 11.45% ] ▽  IIS 软件凭借 11.45% 的市场占有率成为目前全球使用第三广的网络服务端软件

解决 C10K 性能瓶颈是西索耶夫编写 NginX 软件的初衷, 其功能特性基本围绕性能展开:

    •  高并发性: 软件在服务器资源充分且内核参数配置得当的条件下, 单个站点就能够支持 100000 及其以上的并发连接数量
    •  高扩展性: 软件由多个不同功能, 不同层次与不同类型的低耦合度模块组成, 开源社区提供有大量的第三方模块
    •  高可靠性: 软件有父子进程结构, 提供具体服务的每个子进程独立运行
    •  高可用性: 软件支持热加载特性, 能够在软件维护周期内提供 7x24 小时不间断的服务
    •  低消耗性: 软件能够十分细致的管理内存资源, 根据开源社区统计, 软件在维护 100,000 个 HTTP 长连接时仅消耗约 32MB 内存
    •  自由协议: 软件使用 BSD 协议开源, 开源协议相对自由开放 (Tengine, OpenRestry 项目便受益于此)
    •  二次开发: 软件使用 C/C++ 语言开发独立功能模块, 使用 Perl 语言或是 Lua 语言直接做二次开发都较为便捷



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件的主机配置
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
NginX 软件对主机配置没有强制要求, 低配基础款的主机亦能运行 NginX 软件, 但主机的内核参数对 NginX 软件的工作能力有明显影响
NginX 软件受主机的内核参数的影响, 这些内核参数登记在下述配置文件:

    •  资源限制文件 /etc/security/limits.conf
    •  资源限制文件 /etc/security/limits.d/20-nproc.conf (优先级高于 /etc/security/limits.conf 资源限制文件)
    •  内核参数文件 /etc/sysctl.conf

资源限制文件 /etc/security/limits.conf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  soft  nofile  65535                           # 任意用户允许打开的文件句柄数量 (若触发阈值则告警)
*  hard  nofile  65535                           # 任意用户允许打开的文件句柄数量 (若触发阈值则不允许创建新的文件句柄)
*  soft  nproc   65535                           # 任意用户允许打开的进程数量 (若触发阈值则告警)
*  hard  nproc   65535                           # 任意用户允许打开的进程数量 (若触发阈值则不允许创建新的进程)
*  soft  stack   65535                           # 内存栈的容量上限, 容量单位 KB (若触发阈值则告警)
*  hard  stack   65535                           # 内存栈的容量上限, 容量单位 KB (若触发阈值则不允许继续扩大内存栈的容量)
*  soft  core    -1                              # 不设 coredump 文件的容量上限, 容量单位 KB
*  hard  core    -1                              # 不设 coredump 文件的容量上限, 容量单位 KB
*  soft  rss     -1
*  hard  rss     -1

内核参数文件 /etc/sysctl.conf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fs.file-max = 65535                              # 单个进程允许打开的文件句柄数量
net.ipv4.tcp_tw_reuse = 1                        # 新的连接允许复用 TIME_WAIT 状态下的套接字 (缩短套接字的释放时间)
net.ipv4.tcp_keepalive_time = 600                # 会话保持的探测频率为 600 秒
net.ipv4.tcp_fin_timeout = 30                    # 套接字保持 FIN_WAIT2 状态的时间上限为 30 秒
net.ipv4.tcp_max_tw_buckets = 5000               # 套接字保持 TIME_WAIT 状态的数量上限为 5000 个套接字 (多余套接字直接被清理)
net.ipv4.tcp_syncookies = 1                      # 避免主机遭受 TCP 连接的 SYN 攻击
net.ipv4.tcp_max_syn_backlog = 4096              # 配置连接的 SYN 请求队列的长度为 4096 (避免主机丢失客户端的连接请求)
net.ipv4.tcp_rmem = 4096 32768 262142            # 配置连接的接收缓存的最小值/ 默认值/ 最大值 (单位: 字节)
net.ipv4.tcp_wmem = 4096 32768 262142            # 配置连接的发送缓存的最小值/ 默认值/ 最大值 (单位: 字节)
net.ipv4.ip_local_port_range = 1024 65535        # 配置连接的本地端口的取值范围
net.core.netdev_max_backlog = 8096               # 配置连接的冗余接收队列的长度为 8096 个请求
net.core.rmem_default = 262144                   # 套接字的接收缓存区的默认容量为 262144 个字节
net.core.wmem_default = 262144                   # 套接字的发送缓存区的默认容量为 262144 个字节
net.core.rmem_max = 2097152                      # 套接字的接收缓存区的最大容量为 2097152 个字节
net.core.wmem_max = 2097152                      # 套接字的发送缓存区的最大容量为 2097152 个字节

""""""""" 演示内核调优的基本步骤
[root ~]# cat > /etc/security/limits.conf << EOF
*  soft  nofile  65535
*  hard  nofile  65535
*  soft  nproc   65535
*  hard  nproc   65535
*  soft  stack   65535
*  hard  stack   65535
*  soft  core    -1
*  hard  core    -1
*  soft  rss     -1
*  hard  rss     -1
EOF
[root ~]# ulimit -a
--------------------------------------------------------------------------------------------------------------------- ✻

""""""""" 演示内核调优的基本步骤
[root ~]# cat > /etc/sysctl.conf << EOF
fs.file-max = 65535
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_rmem = 4096 32768 262142
net.ipv4.tcp_wmem = 4096 32768 262142
net.ipv4.ip_local_port_range = 1024 65535
net.core.netdev_max_backlog = 8096
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.core.rmem_max = 2097152
net.core.wmem_max = 2097152
EOF
[root ~]# sysctl -p
--------------------------------------------------------------------------------------------------------------------- ✻



