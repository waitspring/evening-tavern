                                                                       
  ()                                     ()                o           
  /\_|_  ,_    _   __,   _  _  _         /\  _   ,_            __   _  
 /  \|  /  |  |/  /  |  / |/ |/ |       /  \|/  /  |  |  |_|  /    |/  
/(__/|_/   |_/|__/\_/|_/  |  |  |_/    /(__/|__/   |_/ \/  |_/\___/|__/
                                                                       
                                                                       
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
负载均衡
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
负载均衡是一个很值得详谈的话题, 其中牵涉到弹性计算/ 网络流量/ ISO 七层协议/ 服务高可用 (双活/ 集群) 在内的丰富内容
负载均衡的常见软件有 NginX/ HTTPD/ F5 BIG LTM/ LVS/ HAProxy

根据用户刻板印象的不同, 负载均衡开源软件有着各自的使用情境:

    •       NginX - 被定义为工作在 HTTP/HTTPS 协议下的互联网服务器开源软件, 负载均衡能力较强 (因此更多的被当作负载均衡软件使用)
    •       HTTPD - 被定义为工作在 HTTP/HTTPS 协议下的互联网服务器开源软件, 负载均衡能力较弱
    •  F5 BIG LTM - 被定义为负载均衡商用服务器, 直接向刷新网络公司购买服务器实体, 支持 TCP/IP 协议与主流的应用层协议
    •         LVS - 被定义为负载均衡开源服务器, 需要用户基于自有服务器搭建, 支持 TCP/IP 协议
    •     HAProxy - 被定义为负载均衡开源服务器, 需要用户基于自有服务器搭建, 支持 TCP/IP 协议

┌─────────────────┬─────────────────────┬─────────────────────────────────────────────────────────────────────────────┐
│                 │        TYPE         │                                  PROTOCOL                                   │
│      NAME       ├──────────┬──────────┼──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬───────────┤
│                 │ HARDWARE │ SOFTWARE │    IP    │   TCP    │   UDP    │   ICMP   │   SMTP   │   HTTP   │   HTTPS   │
├─────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤
│           NginX │          │    √     │          │    √     │    √     │          │    √     │    √     │     √     │
├─────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤
│           HTTPD │          │    √     │          │          │          │          │          │    √     │     √     │
├─────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤
│      F5 BIG LTM │    √     │          │    √     │    √     │    √     │    √     │    √     │    √     │     √     │
├─────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤
│             LVS │          │    √     │          │    √     │    √     │          │          │          │           │
├─────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤
│         HAProxy │          │    √     │          │    √     │    √     │          │          │          │           │
└─────────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴───────────┘



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TCP/IP 协议
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TCP/IP 协议是网络通信领域的核心协议, 脱胎于 OSI 官方制定的网络通信七层协议, 并对后者做出简化
TCP/IP 协议和 ISO 网络通信七层协议的对比图如下所示

    ┌────────────────────────────┐                                                       ┌────────────────────────────┐
    │ Application                │                                                       │                            │
    ├────────────────────────────┤                                                       │                            │
    │ Presentation               │                                                       │ Application                │
    ├────────────────────────────┤                                                       │                            │
    │ Session                    │                                                       │                            │
    ├────────────────────────────┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼────────────────────────────┤
    │ Transport                  │                                                       │ Transport                  │
    ├────────────────────────────┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼────────────────────────────┤
    │ Network                    │                                                       │ Network                    │
    ├────────────────────────────┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼────────────────────────────┤
    │ Data Link                  │                                                       │                            │
    ├────────────────────────────┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤ Network Port               │
    │ Physical                   │                                                       │                            │
    └────────────────────────────┘                                                       └────────────────────────────┘
               [ ISO ]                                                                             [ TCP/IP ]

    •  Application  :: 即应用层, 包含 ICMP/FTP/SMTP/... 在内的多种应用通信协议
    •  Transport    :: 即传输层, 包含 TCP/UDP 两种数据传输协议, TCP 连接是安全可靠的通信连接, UDP 连接是快速的无状态连接
    •  Network      :: 即网络层, 包含 IPv4/IPv6 两种互联网通信地址协议
    •  Network Port :: 即网络接口层, 该协议层由数据链路和物理层面的比特 (Byte) 信息构成

TCP 连接的建立机制 (三次握手)

    ┌────────────────────────────┐                                                       ┌────────────────────────────┐
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ ---------------------- SYN=1 -----------------------> │                            │
    │ \\\\\\ Client Host \\\\\\\ │ <--------------------- ACK=1 ------------------------ │        Server Host         │
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ ---------------------- ACK=1 -----------------------> │                            │
    └────────────────────────────┘                                                       └────────────────────────────┘

    •  第一次握手 :: 客户端向服务端发送一个请求报文, 报文内 SYN 标志位的值被设置为 1, 如果服务端收到该请求报文, 则打开监听服务
    •  第二次握手 :: 服务端向客户端发送一个确认报文, 报文内 ACK 标志位的值被设置为 1, 如果客户端收到该请求报文, 则客户端建立 TCP 连接
    •  第三次握手 :: 客户端向服务端发送一个确认报文, 报文内 ACK 标志位的值被设置为 1, 如果服务端收到该请求报文, 则服务端建立 TCP 连接

    •  第一次握手成功表示 "服务端知道自己可以接收到客户端的发送信息"
    •  第二次握手成功表示 "客户端知道自己可以向服务端发送信息, 同时自己也可以接收到服务端的发送信息"
    •  第三次握手成功表示 "服务端知道自己可以向客户端发送信息"
    •  双方建立通信连接的请求都被确认无误, TCP 连接随即建立

TCP 连接的断开机制 (四次挥手)

    ┌────────────────────────────┐                                                       ┌────────────────────────────┐
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ ---------------------- FIN=1 -----------------------> │                            │
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ <--------------------- ACK=1 ------------------------ │                            │
    │ \\\\\\ Client Host \\\\\\\ │ < - - - - - - - - - - - - - - - - - - - - - - - - - - │        Server Host         │
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ <--------------------- FIN=1 ------------------------ │                            │
    │ \\\\\\\\\\\\\\\\\\\\\\\\\\ │ ---------------------- ACK=1 -----------------------> │                            │
    └────────────────────────────┘                                                       └────────────────────────────┘

    •  第一次挥手 :: 客户端向服务端发送一个释放报文, 报文内 FIN 标志位的值被设置为 1, 客户端发送该报文后, 此端 TCP 连接进入半断开状态
    •  第二次挥手 :: 服务端向客户端发送一个确认报文, 报文内 ACK 标志位的值被设置为 1, 客户端收到该报文后, 确认释放连接的请求已被接收
    •  两次挥手间 :: 服务端继续将上层应用未传输完毕的数据发送到客户端, 直到上层应用的数据全部发送完毕后, 服务端再发起第三次挥手
    •  第三次挥手 :: 服务端向客户端发送一个释放报文, 报文内 FIN 标志位的值被设置为 1, 服务端发送该报文后, 此端 TCP 连接进入半断开状态
    •  第四次挥手 :: 客户端向服务端发送一个确认报文, 报文内 ACK 标志位的值被设置为 1, 服务端收到该报文后, 两端 TCP 连接完全断开

    •  第一次挥手意味着 "客户端向服务端发送断开连接的通知"
    •  第二次挥手意味着 "服务端向客户端发送确认断开连接的通知, 表示自己已经接收到客户端断开连接的请求"
    •  第三次挥手意味着 "服务端向客户端发送断开连接的通知"
    •  第四次挥手意味着 "客户端向服务端发送确认断开连接的通知, 表示自己已经接收到服务端断开连接的请求"
    •  双方断开通信连接的请求都被确认无误, TCP 连接随即断开



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STREAM 配置块
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STREAM 配置块是配置文件内可选的配置块, 主要用于定义软件在 TCP 协议层的相关服务
STREAM 配置块能够内嵌子配置项与配置块, 子配置块直接继承父配置块的配置项, 同时又能够重载父配置块的配置项
STREAM 配置块能够内嵌的子配置块主要有:

    •  STREAM SERVER   配置块, 主要用于定义软件在 TCP 协议层的负载均衡服务, 其具体数量不定
    •  STREAM UPSTREAM 配置块, 主要用于定义软件在 TCP 协议层的负载均衡机制, 其具体数量不定

┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   STREAM PART {                                                                                                     ┊
┊       ... ...                                                                                                       ┊
┊       STREAM SERVER PART {                                                                                          ┊
┊           ... ...                                                                                                   ┊
┊       }                                                                                                             ┊
┊       STREAM UPSTREAM {                                                                                             ┊
┊           ... ...                                                                                                   ┊
┊       }                                                                                                             ┊
┊   }                                                                                                                 ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

STREAM 配置块能够内嵌的子配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ preread_buffer_size 16k;             │    √    │ 设置 TCP 连接的数据预读缓冲区容量为 16kb
│ preread_buffer_size SIZE;            │         │ 设置 TCP 连接的数据预读缓冲区容量为 SIZE (容量单位)
│ preread_timeout 30s;                 │    √    │ 设置 TCP 连接的数据预读超时时间为 30 秒
│ preread_timeout TIME;                │         │ 设置 TCP 连接的数据预读超时时间为 TIME 时间长度
│ variables_hash_bucket_size 64;       │    √    │ 设置变量哈希表的桶容量为 64kb
│ variables_hash_bucket_size NUM;      │         │ 设置变量哈希表的桶容量为 NUMkb
│ variables_hash_max_size 1024;        │    √    │ 设置变量哈希表的容量为 1024kb
│ variables_hash_max_size NUM;         │         │ 设置变量哈希表的容量为 NUMkb
│ resolver ADDR;                       │         │ 使用 ADDR 作为 DNS 服务器
│ resolver_timeout 30s;                │    √    │ 配置 DNS 服务的响应超时时间为 30 秒
│ resolver_timeout TIME;               │         │ 配置 DNS 服务的响应超时时间为 TIME 时间长度
│ tcp_nodelay on;                      │    √    │ 启用操作系统的 tcp_nodelay 机制
│ tcp_nodelay off;                     │         │ 禁用操作系统的 tcp_nodelay 机制
│ map STRING $VARIABLE { ... }         │         │ 提取 STRING 字符串的一部分内容赋予变量 $VARIABLE 作为参数值
│ include /PATH/TO/FILE;               │         │ 加载 /PATH/TO/FILE 文件内的配置块与配置项
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, STREAM 配置块的使用办法
[root ~]# mkdir -p /etc/nginx/stream.d
[root ~]# vim /etc/nginx/nginx.conf
... ...
... ...
stream {
    preread_buffer_size 128k;
    preread_timeout 300s;

    tcp_nodelay on;

    map $time_iso8601 $fmtime {
        default $time_iso8601;
        '~^(?<ymd>\d{4}-\d{2}-\d{2})T(?<hms>\d{2}:\d{2}:\d{2}).*$' '$ymd $hms';
    }
    map $msec $fmsec {
        default '';
        '~^\d+\.(?<sec>\d{3})' '$sec';
    }

    log_format demo '$fmtime.$fmsec INFO $status $remote_addr:$remote_port $upstream_addr';

    include /etc/nginx/stream.d/*.conf;
}
--------------------------------------------------------------------------------------------------------------------- ✻

STREAM SERVER 配置块能够内嵌的子配置项登记如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ Configuration                        │ Default │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ listen NUM;                          │         │ 设置软件监听主机的 NUM 端口
│ proxy_timeout 60;                    │    √    │ 转发请求时, 设置客户端接收服务端应答的超时时间为 60 秒
│ proxy_timeout NUM;                   │         │ 转发请求时, 设置客户端接收服务端应答的超时时间为 NUM 秒
│ proxy_connect_timeout 60;            │    √    │ 转发请求时, 设置客户端请求连接服务端的超时时间为 60 秒
│ proxy_connect_timeout NUM;           │         │ 转发请求时, 设置客户端请求连接服务端的超时时间为 NUM 秒
│ proxy_protocol_timeout 30s;          │    √    │ 转发请求时, 设置软件读取代理协议头的超时时间为 30 秒
│ proxy_protocol_timeout TIME;         │         │ 转发请求时, 设置软件读取代理协议头的超时时间为 TIME 时间长度
│ proxy_socket_keepalive on;           │    √    │ 转发请求时, 开启会话保持
│ proxy_socket_keepalive off;          │         │ 转发请求时, 关闭会话保持
│ ssl_preread on;                      │         │ 建立 SSL/TLS 连接前, 预读取域名数据到 $ssl_preread_server_name 变量内
│ ssl_preread off;                     │    √    │ 关闭预读取机制
│ access_log /PATH/TO/LOG [ FORMAT ];  │         │ 转发请求时, 使用 FORMAT 日志格式输出访问日志到 /PATH/TO/LOG 文件
│ error_log /PATH/TO/LOG [ LEVEL ];    │         │ 转发请求时, 高于 LEVEL  等级的错误日志输出到 /PATH/TO/LOG 文件
│ proxy_pass DEST;                     │         │ 设置请求的转发目标为 DEST (允许套接字, UPSTREAM 组名, 变量等多种格式)
│ allow ADDR;                          │         │ 允许符合 ADDR 的地址范围访问 (白名单)
│ deny ADDR;                           │         │ 拒绝符合 ADDR 的地址范围访问 (黑名单)
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

listen num [ parameter... ];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
listen 配置项能够设置软件的监听端口, 但请注意: listen 配置项的监听端口对象不应重复 (尽管都是由软件进程监听, 但其监听协议不可冲突)
listen 配置项常用的可选参数有
::  ssl                                          设置监听端口支持 SSL 加密
::  udp                                          设置监听端口支持 UDP 协议
::  backlog=num                                  设置 TCP/backlog 队列的大小 (默认值为 -1 表示不设置)
::  rcvbuf=num                                   设置套接字接收缓冲区的容量 (默认值为内核参数 net.core.rmem_default)
::  sendbuf=num                                  设置套接字发送缓冲区的容量 (默认值为内核参数 net.core.wmem_default)

""""""""" 演示 NginX 软件的配置文件内, STREAM SERVER 配置块的使用办法
[root ~]# vim /etc/nginx/stream.d/foo.season.com.conf
server {
    listen 8081;
    proxy_timeout 300;
    proxy_connect_timeout 300;
    proxy_protocol_timeout 300s;
    access_log /var/log/nginx/foo.season.com.log demo;
    error_log  /var/log/nginx/foo.season.com.log error;
    allow 172.16.0.250/32;
    deny 0.0.0.0/0;
    proxy_pass 127.0.0.1:8080;
}
--------------------------------------------------------------------------------------------------------------------- ✻



