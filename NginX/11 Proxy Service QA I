 , __                                                                 __     ___,         _ 
/|/  \                            ()                o                /  \   /   |        | |
 |___/ ,_    __                   /\  _   ,_            __   _      | __ | |    |        | |
 |    /  |  /  \_/\/  |   |      /  \|/  /  |  |  |_|  /    |/      |/  \| |    |      _ |/ 
 |       |_/\__/  /\_/ \_/|/    /(__/|__/   |_/ \/  |_/\___/|__/     \__/\_/\__/\_/    \_/\/
                         /|                                                                 
                         \|                                                                 
--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决跨域请求产生的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HTTP/ HTTPS 协议使用协议与套接字划分服务域, 这意味着不同的 URL 仅在拥有相同的协议与套接字时, 会被视为一个同源网络服务
默认的, 发起请求的客户端 (浏览器) 仅允许访问同源网络服务, 这是客户端使用的一种安全保护策略
默认的, 发起请求的客户端 (浏览器) 又使用 CORS (Corss-Origin Resource Sharing) 策略解决跨域请求带来的问题

    *  Access-Control-Allow-Origin:       设置服务端放行跨域请求的来源范围, 从相应来源发起的访问请求不受到服务端检查
    *  Access-Control-Allow-Credentials:  设置服务端是否允许客户端请求在 CORS 内容中附带 Cookie 信息
    *  Access-Control-Allow-Methods:      设置服务端放行跨域请求的请求方法的范围, 仅允许固定几种方法的请求不受到服务端检查
    *  Access-Control-Max-Age:            设置服务端接受预检命令 (OPTIONS) 之后, 预检有效期的时间长度

阅读上述描述时, 还请注意:

    •  如果 Access-Control-Allow-Credentials 的值为真 (true), 那么 Access-Control-Allow-Origin 的值不应当配置为通配符 (*)
    •  如果 Access-Control-Max-Age 的值为零值 (0), 那么每个跨域请求都会提前发送 OPTIONS 方法的预检命令

跨域的情境举例如下
┌────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────
│ Situation                                      │ Comment
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 http:// 协议与 ldap:// 协议的访问请求会产生跨域
│ ldap://www.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 80 端口与 8081 端口的访问请求会产生跨域
│ http://www.season.com:8081/api?src=host        │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 www.season.com 子域与 foo.season.com 子域的访问请求会产生跨域
│ http://foo.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://season.com/api?src=host                 │ 使用 season.com 主域名与 napkin.com 主域名的访问请求会产生跨域
│ http://napkin.com/api?src=host                 │
└────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, 如何设置服务端 CORS 跨域支持策略
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Credentials true;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    add_header Access-Control-Allow-Headers $http_access_control_request_headers;
    add_header Access-Control-Max-Age 86400;
    if ($request_method = 'OPTIONS') {
        return 200;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决缓存中的域名解析记录失真的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
默认的, NginX 软件转发请求到一个域名服务时, 仅第一次转发需要使用 DNS 服务解析域名, 解析记录随即被 NginX 软件缓存并供后续转发动作使用
默认的, NginX 软件转发请求到一个域名服务时, 优先使用自身缓存的解析记录, 遭遇域名动态解析的情境时便产生下述问题:

┌───────┬──────────────────────────────────────────────────────┬──────────────────────────────────────────────────────┐
│ Time  │                        NginX                         │                         DNS                          │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   0   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.11.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   1   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   2   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 200 OK                                               │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   3   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.12.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   4   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   5   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 502 Bad Gateway                                      │                                                      │
│       │                                                      │                                                      │
└───────┴──────────────────────────────────────────────────────┴──────────────────────────────────────────────────────┘

""""""""" 演示 NginX 软件的配置文件内, 如何避免域名解析记录失真
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    resolver 223.5.5.5 223.6.6.6;
    location / {
        set $website "http://www.nginx.com";
        proxy_pass $website;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决若干 HTTP/HTTPS 请求中夹杂 WS/WSS 请求的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
WS/WSS 协议是一种由 HTML5 页面使用的通信协议, 已被大多数的浏览器兼容
WS/WSS 协议的核心特性为:

    •  TCP 连接一旦建立, 便可以构建起持久化的连接
    •  服务端可以主动向客户端推送数据, 而非像传统的 HTTP/HTTPS 协议长连接, 服务端只能等待客户端的请求并响应

使用 HTTP/HTTPS 协议代理请求时, 若请求使用 WSS 协议层 (即请求为 WebSocket 类型), 则使用下述特殊配置放行
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ proxy_set_header Connection 'Upgrade';                                                                              │
│ proxy_set_header Upgrade $http_upgrade;                                                                             │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

    •  请求头使用键值对 Connection: Upgrade 标记一个键名为 Upgrade 的 hop-by-hop 键值对
    •  请求头使用键值对 Upgrade: WebSocket 把请求升级为 WS/WSS 协议

""""""""" 演示 NginX 软件的配置文件内, 如何解决若干 HTTP/HTTPS 请求中夹杂 WS/WSS 请求的问题
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header Connection 'Upgrade';
    proxy_set_header Upgrade $http_upgrade;
    proxy_connect_timeout 86400;
    proxy_read_timeout 86400;
    proxy_send_timeout 86400;
    proxy_buffers 8 512k;
    proxy_buffer_size 128k;
    proxy_busy_buffers_size 1m;
    proxy_temp_file_write_size 2m;
    location / {
        proxy_pass http://www.nginx.com;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
如何解决若干请求 URI 不匹配资源目录结构的问题?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HTTP/HTTPS 请求访问 SERVER/ LOCATION 配置块内使用 root 配置项定义的静态资源时, 实际需要命中 /PATH/TO/DIR/$uri 的静态资源
HTTP/HTTPS 请求又因为某些原因, 可能存在 $uri 字符串与主机静态资源目录结构不匹配的问题, 例如:

┌────────────────────────────────────────────────┐
│ https://foo.season.com/product/check/demo.html ├╌╌╌╌╌╌╌╌╌╌╌┐
└────────────────────────────────────────────────┘           ┊
                                                             ┊ (如何命中静态资源???)
                                                             ┊            ┌───────────────────────────────────────────┐
                                                             └╌╌╌╌╌╌╌╌╌╌╌>│ /var/nginx/project/v1.0.1/check/demo.html │
                                                                          └───────────────────────────────────────────┘

解决上述问题以前, 需要重新学习 LOCATION 配置块与 proxy_pass 配置项的使用方法 (详情见 05 Administration III)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
proxy_pass https://$host;                        转发请求至 $host 站点且附带已经命中 LOCATION 配置块的 URI 部分
proxy_pass https://$host/;                       转发请求至 $host 站点其除去已经命中 LOCATION 配置块的 URI 部分

""""""""" 演示 NginX 软件的配置文件内, 如何解决若干请求 URI 不匹配资源目录结构的问题
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_connect_timeout 86400;
    proxy_read_timeout 86400;
    proxy_send_timeout 86400;
    proxy_buffers 8 512k;
    proxy_buffer_size 128k;
    proxy_busy_buffers_size 1m;
    proxy_temp_file_write_size 2m;
    location /product/ {
        # 请求被重构为 https://foo.season.com/check/demo.html
        proxy_pass https://$host/;
    }
    location /check/ {
        autoindex on;
        autoindex_localtime on;
        autoindex_exact_size off;
        # 请求目前写作 https://foo.season.com/check/demo.html 可以命中静态资源
        root /var/nginx/project/v1.0.1;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



