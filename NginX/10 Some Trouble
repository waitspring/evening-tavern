                              ______                _    _      
  ()                         (_) |                 | |  | |     
  /\  __   _  _  _    _          | ,_    __        | |  | |  _  
 /  \/  \_/ |/ |/ |  |/        _ |/  |  /  \_|   | |/ \_|/  |/  
/(__/\__/   |  |  |_/|__/     (_/    |_/\__/  \_/|_/\_/ |__/|__/


--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置反向代理服务
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置反向代理服务的过程中, 运维工程师需要直面下述难题:

    如何解决跨域请求?
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    HTTP/ HTTPS 协议使用协议与套接字划分服务域, 这意味着不同的 URL 仅在拥有相同的协议与套接字时, 会被视为一个同源网络服务
    默认的, 发起请求的客户端 (浏览器) 仅允许访问同源网络服务, 这是客户端使用的一种安全保护策略
    默认的, 发起请求的客户端 (浏览器) 又使用 CORS (Corss-Origin Resource Sharing) 策略解决跨域请求带来的问题

        *  Access-Control-Allow-Origin:       设置服务端放行跨域请求的来源的范围, 从相应来源发起的访问请求不受到服务端检查
        *  Access-Control-Allow-Credentials:  设置服务端是否允许客户端请求在 CORS 内容中附带 Cookie 信息
        *  Access-Control-Allow-Methods:      设置服务端放行跨域请求的请求方法的范围, 仅允许固定几种方法的请求不受到服务端检查
        *  Access-Control-Max-Age:            设置服务端接受预检命令 (OPTIONS) 之后, 预检有效期的时间长度

    阅读上述描述时, 还请注意:

        •  如果 Access-Control-Allow-Credentials 的值为真 (true), 那么 Access-Control-Allow-Origin 的值不应配置为通配符 (*)
        •  如果 Access-Control-Max-Age 的值为零值 (0), 那么每个跨域请求都会提前发送 OPTIONS 方法的预检命令

    跨域的情境举例如下
    ┌────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────
    │ Situation                                  │ Comment
    ├────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
    │ http://www.season.com/api?src=host         │ 使用 http:// 协议与 ldap:// 协议的访问请求会产生跨域
    │ ldap://www.season.com/api?src=host         │
    ├────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
    │ http://www.season.com/api?src=host         │ 使用 80 端口与 8081 端口的访问请求会产生跨域
    │ http://www.season.com:8081/api?src=host    │
    ├────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
    │ http://www.season.com/api?src=host         │ 使用 www.season.com 子域与 foo.season.com 子域的访问请求会产生跨域
    │ http://foo.season.com/api?src=host         │
    ├────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
    │ http://season.com/api?src=host             │ 使用 season.com 主域名与 napkin.com 主域名的访问请求会产生跨域
    │ http://napkin.com/api?src=host             │
    └────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, 如何设置服务端 CORS 跨域支持策略
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
SERVER {
    ... ...
    ... ...
    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Credentials true;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    add_header Access-Control-Allow-Headers $http_access_control_request_headers;
    add_header Access-Control-Max-Age 86400;

    if ($request_method = 'OPTIONS') {
        return 200;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置正向代理服务
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置正向代理服务的过程中, 运维工程师需要直面下述难题:

    如何解决域名动态解析
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    默认的, NginX 软件转发请求到域名时, 仅有第一次转发需要使用 DNS 服务解析域名, 域名的解析记录随即被软件缓存
    默认的, NginX 软件优先使用自身缓存的域名记录来解析域名, 这会导致一个问题:

        1. 如果服务端域名使用动态解析
        2.


