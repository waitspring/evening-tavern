                              ______                _    _      
  ()                         (_) |                 | |  | |     
  /\  __   _  _  _    _          | ,_    __        | |  | |  _  
 /  \/  \_/ |/ |/ |  |/        _ |/  |  /  \_|   | |/ \_|/  |/  
/(__/\__/   |  |  |_/|__/     (_/    |_/\__/  \_/|_/\_/ |__/|__/


--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置反向代理服务
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置反向代理服务的过程中, 运维工程师需要直面下述难题:

    1. 如何解决跨域请求产生的问题?

如何解决跨域请求产生的问题?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HTTP/ HTTPS 协议使用协议与套接字划分服务域, 这意味着不同的 URL 仅在拥有相同的协议与套接字时, 会被视为一个同源网络服务
默认的, 发起请求的客户端 (浏览器) 仅允许访问同源网络服务, 这是客户端使用的一种安全保护策略
默认的, 发起请求的客户端 (浏览器) 又使用 CORS (Corss-Origin Resource Sharing) 策略解决跨域请求带来的问题

    *  Access-Control-Allow-Origin:       设置服务端放行跨域请求的来源范围, 从相应来源发起的访问请求不受到服务端检查
    *  Access-Control-Allow-Credentials:  设置服务端是否允许客户端请求在 CORS 内容中附带 Cookie 信息
    *  Access-Control-Allow-Methods:      设置服务端放行跨域请求的请求方法的范围, 仅允许固定几种方法的请求不受到服务端检查
    *  Access-Control-Max-Age:            设置服务端接受预检命令 (OPTIONS) 之后, 预检有效期的时间长度

阅读上述描述时, 还请注意:

    •  如果 Access-Control-Allow-Credentials 的值为真 (true), 那么 Access-Control-Allow-Origin 的值不应当配置为通配符 (*)
    •  如果 Access-Control-Max-Age 的值为零值 (0), 那么每个跨域请求都会提前发送 OPTIONS 方法的预检命令

跨域的情境举例如下
┌────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────────────
│ Situation                                      │ Comment
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 http:// 协议与 ldap:// 协议的访问请求会产生跨域
│ ldap://www.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 80 端口与 8081 端口的访问请求会产生跨域
│ http://www.season.com:8081/api?src=host        │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://www.season.com/api?src=host             │ 使用 www.season.com 子域与 foo.season.com 子域的访问请求会产生跨域
│ http://foo.season.com/api?src=host             │
├────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────────────
│ http://season.com/api?src=host                 │ 使用 season.com 主域名与 napkin.com 主域名的访问请求会产生跨域
│ http://napkin.com/api?src=host                 │
└────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────

""""""""" 演示 NginX 软件的配置文件内, 如何设置服务端 CORS 跨域支持策略
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Credentials true;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    add_header Access-Control-Allow-Headers $http_access_control_request_headers;
    add_header Access-Control-Max-Age 86400;

    if ($request_method = 'OPTIONS') {
        return 200;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置正向代理服务
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
配置正向代理服务的过程中, 运维工程师需要直面下述难题:

    1. 如何解决因域名动态解析产生的 NginX 缓存记录失真的问题?

如何解决因域名动态解析产生的 NginX 缓存记录失真的问题
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
默认的, NginX 软件转发请求到一个域名服务时, 仅第一次转发需要使用 DNS 服务解析域名, 解析记录随即被 NginX 软件缓存并供后续转发动作使用
默认的, NginX 软件转发请求到一个域名服务时, 优先使用自身缓存的解析记录, 遭遇域名动态解析的情境时便产生下述问题:

┌───────┬──────────────────────────────────────────────────────┬──────────────────────────────────────────────────────┐
│ Time  │                        NginX                         │                         DNS                          │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   0   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.11.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   1   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   2   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 200 OK                                               │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   3   │                                                      │ bash:                                                │
│       │                                                      │ dig A www.nginx.com                                  │
│       │                                                      │ -----------------------------------                  │
│       │                                                      │ 104.18.12.5                                          │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   4   │ nginx:                                               │                                                      │
│       │ proxy_pass http://www.nginx.com;                     │                                                      │
│       │                                                      │                                                      │
├───────┼──────────────────────────────────────────────────────┼──────────────────────────────────────────────────────┤
│   5   │ nginx:                                               │                                                      │
│       │ proxy_pass http://104.18.11.5;                       │                                                      │
│       │ -----------------------------------                  │                                                      │
│       │ 502 Bad Gateway                                      │                                                      │
│       │                                                      │                                                      │
└───────┴──────────────────────────────────────────────────────┴──────────────────────────────────────────────────────┘

使用开源社区提供的第三方模块 nginx-upstream-jdomain 可以解决缓存记录失真的问题

jdomain domain [ parameter... ];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
jdomain 配置项由开源社区提供的第三方模块 nginx-upstream-jdomain 支持, 仅允许在 UPSTREAM 配置块内部使用
jdomain 配置项常用的可选参数有
::  port=num                              [ 80 ] 标记目标地址的监听端口, 与目标地址组成套接字并作为 UPSTREAM 配置块的服务节点
::  max_ips=num                            [ 4 ] 划分用于缓存域名解析记录的缓存池的大小, num 表示每个域名允许缓存的解析记录数量
::  interval=num                           [ 1 ] 设置域名解析记录的生命周期为 num 秒 (从 DNS 获取一次最新解析记录的间隔时长)
::  strict                                       如果 DNS 解析域名失败, 则把该节点标记为下线状态 (down)

""""""""" 编译安装 NginX 软件时, 添加 nginx-upstream-jdomain 模块
[root ~]# tar -xzf /srv/nginx-1.20.2.tar.gz -C /root
[root ~]# tar -xzf /srv/nginx-upstream-jdomain-1.4.0.tar.gz -C /root/nginx-1.20.2
[root ~]# cd /root/nginx-1.20.2
[root nginx-1.20.2]# ./configure --prefix=/usr/local/nginx \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/run/nginx.lock \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--user=nginx \
--group=nginx \
--with-debug \
--with-stream \
--with-http_ssl_module \
--with-http_realip_module \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_gzip_static_module \
--with-http_secure_link_module \
--with-http_stub_status_module \
--with-http_gunzip_module \
--with-http_auth_request_module \
--add-module nginx-upstream-jdomain-1.4.0
[root nginx-1.20.2]# make
[root nginx-1.20.2]# make install
[root nginx-1.20.2]# nginx -v
--------------------------------------------------------------------------------------------------------------------- ✻

""""""""" 演示 NginX 软件的配置文件内, 如何设置域名的动态解析效果
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    resolver 223.5.5.5;
    upstream backend {
        jdomain www.nginx.com strict;
        server 127.0.0.1:80 backup;
    }
}
--------------------------------------------------------------------------------------------------------------------- ✻



