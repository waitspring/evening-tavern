  ___,                                                                              _  _       
 /   |     |             o          o                        o                     | |(_|   |_/
|    |   __|   _  _  _       _  _       , _|_  ,_    __, _|_     __   _  _         | |  |   |  
|    |  /  |  / |/ |/ |  |  / |/ |  |  / \_|  /  |  /  |  |  |  /  \_/ |/ |      _ |/   |   |  
 \__/\_/\_/|_/  |  |  |_/|_/  |  |_/|_/ \/ |_/   |_/\_/|_/|_/|_/\__/   |  |_/    \_/\/   \_/   


--  This document was created by Xuanming in 2022, thanks for your reading



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
错误页面
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
HTTP/HTTPS 协议层使用三位数字代码表示网页服务器超文本传输协议的响应状态, 简称 HTTP 状态码
HTTP 状态码的注册表由互联网号码分配局（Internet Assigned Numbers Authority）维护, 其大体划分如下:

    •  1xx 状态码代表客户端请求已被服务端接受, 但需要服务端继续处理
    •  2xx 状态码代表客户端请求已被服务端接受, 且形成相应的响应结果
    •  3xx 状态码代表客户端请求需要重定向
    •  4xx 状态码代表客户端请求错误
    •  5xx 状态码代理服务端响应错误

HTTP 状态码的注册表登记部分如下
┌──────────────────────────────────────┬─────────┬─────────────────────────────────────────────────────────────────────
│ HTTP/HTTPS Status                    │ Code    │ Comment
├──────────────────────────────────────┼─────────┼─────────────────────────────────────────────────────────────────────
│ Continue                             │ 100     │ 服务端临时响应使用的 HTTP 状态码, 客户端应当继续发送请求的剩余部分
│ Switching Protocols                  │ 101     │ 服务端已经理解客户端的请求, 但要求客户端更换请求协议
│ Processing                           │ 102     │ 服务端临时响应使用的 HTTP 状态码, 服务端正在处理请求, 客户端需要等待响应
│ OK                                   │ 200     │ 服务端响应成功
│ Created                              │ 201     │ 服务端响应成功, 相应资源已经依据请求的需要而建立
│ Accepted                             │ 202     │ 服务端已经接受请求, 但尚未处理请求
│ Non-Authoritative Information        │ 203     │ 服务端已成功处理请求，但响应头是来自第三方服务端的拷贝
│ No Content                           │ 204     │ 服务端已成功处理请求，但返回内容仅包含响应头而没有包体
│ Reset Content                        │ 205     │ 服务端已成功处理请求，但返回内容仅包含响应头而没有包体 (客户端重置文档视图)
│ Partial Content                      │ 206     │ 服务端已成功处理部分 GET 请求
│ Multiple Choices                     │ 300     │ 被请求的资源有一系列可供选择的回馈信息, 客户端能够自行选择一个地址进行重定向
│ Moved Permanently                    │ 301     │ 被请求的资源永久移动到新位置
│ Moved Temporarily                    │ 302     │ 被请求的资源临时移动到新位置
│ Bad Request                          │ 400     │ 客户端发送的请求存在参数错误
│ Unauthorized                         │ 401     │ 客户端发送的请求需要用户验证
│ Forbidden                            │ 403     │ 客户端发送的请求出现越权情况, 服务端拒绝执行请求
│ Not Found                            │ 404     │ 服务端未发现请求要求的资源
│ Method Not Allowed                   │ 405     │ 服务端不允许请求当前使用的方法 (GET/ POST/ PUT/ DELETE)
│ Internal Server Error                │ 500     │ 服务端内部错误, 标记请求触发到一个 BUG 漏洞
│ Not Implemented                      │ 501     │ 服务端不满足请求当前的需要
│ Bad Gateway                          │ 502     │ 客户端无法连接到服务端
│ Service Unavailable                  │ 503     │ 服务端性能过载, 并导致无法响应请求
│ Gateway Timeout                      │ 504     │ 客户端连接服务端时出现超时
│ HTTP Version Not Supported           │ 505     │ HTTP 版本错误
└──────────────────────────────────────┴─────────┴─────────────────────────────────────────────────────────────────────

error_page code ... [ =code ] uri;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error_page 配置项是错误页面配置项, 支持在 HTTP 配置块, SERVER 配置块, LOCATION 配置块内编写
error_page 配置项的使用要点如下:

    •  服务端响应标头的状态代码能够匹配到 code ... 列表中的任何代码时, 请求被重定向到 uri 路由
    •  error_page 配置项用于重定向的路由规则, 在不用 (/) 作为起始符号时, 会触发软件的显式重定向 (URL 信息会被改写, HTTP 302)
    •  error_page 配置项用于重定向的路由规则, 在使用 (/) 作为起始符号时, 仅触发软件的隐式重定向 (URL 信息保持不变, 但页面内容被改写)

""""""""" 演示 NginX 软件的配置文件内, error_page 配置项的使用办法
[root ~]# sudo -u nginx mkdir -p /var/nginx/error_page
[root ~]# sudo -u nginx echo 'HTTP Status Code 403' > /var/nginx/error_page/403.html
[root ~]# sudo -u nginx echo 'HTTP Status Code 404' > /var/nginx/error_page/404.html
[root ~]# sudo -u nginx echo 'HTTP Status Code 5xx' > /var/nginx/error_page/5xx.html
[root ~]# vim /etc/nginx/nginx.conf
http {
    ... ...
    ... ...
    error_page 403 /error_page/403.html;
    error_page 404 /error_page/404.html;
    error_page 500 501 502 503 504 505 /error_page/5xx.html;
    root /var/nginx;
}
--------------------------------------------------------------------------------------------------------------------- ✻



━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
日志管理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
访问日志文件寄存客户端请求与服务端响应的历史记录, 涵盖 4xx 类型与 5xx 类型的服务端响应错误, 主要用于定位网络链路问题
错误日志文件寄存软件在启动与日常运行的过程中产生的错误记录

log_format fmtname '... ...';
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log_format 配置项是日志输出格式配置项, 允许在 HTTP 配置块内使用, 用于指定访问日志与错误日志使用的输出格式
log_format 配置项的语法元素如下
**  log_format                                   固定的关键字, 标记这是一个日志格式配置项
**  fmtname                                      必要的格式名, 便于后续绑定到具体的日志文件配置项
**  ... ...                                      必要的格式串, 使用变量名与常量字符串编辑

编辑日志格式时, 允许使用的变量名如下
┌────────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────
│ $arg_PARA                  │ 捕获客户端 GET 请求中, 路由附带参数 PARA 的值, 例如 /index?foo=100 中的 100 使用 $arg_foo 捕获
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $args                      │ 捕获客户端 GET 请求中, 路由附带的参数字符串, 例如 /index?foo=100 中的 foo=100 使用 $args 捕获
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $body_bytes_sent           │ 捕获服务端响应包体的容量大小 (单位: byte)
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $content_length            │ 捕获客户端请求头部的 content-length 字段的值
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $content_type              │ 捕获客户端请求头部的 content-type 字段的值
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $uri                       │ 捕获客户端请求中, 不带参数的路由信息, 例如 /index.html?foo=100 中的 /index.html 字符串
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $request_uri               │ 捕获客户端请求中, 附带参数的路由信息, 例如 /index.html?foo=100 中的 /index.html?foo=100 字符串
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $host                      │ 捕获客户端请求头部的 host 字段的值, 该值本质就是用户在浏览器地址栏中输入的地址
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $hostname                  │ 捕获 NginX 软件的部署主机的主机名
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $http_referer              │ 捕获完整的 URL 字符串, 包含协议头, 套接字, 路由和参数, 例如 http://foo.season.com?foo=100
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $http_user_agent           │ 捕获客户端请求头部的 user-agent 字段的值
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $nginx_version             │ 捕获 NginX 软件的版本号
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $remote_addr               │ 捕获 ESTABLISHED 连接中, 客户端使用的地址
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $remote_port               │ 捕获 ESTABLISHED 连接中, 客户端使用的端口
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $request                   │ 实际拼接效果为 "$request_method $request_uri $server_protocol" 字符串
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $request_filename          │ 捕获客户端请求中, 不带参数的路由信息, 并转换为文件系统上的绝对路径
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $request_method            │ 捕获客户端请求的请求方法, 例如 GET/ POST/ PUT/ DELETE
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $request_time              │ 捕获客户端请求的响应时长
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $scheme                    │ 捕获客户端请求的请求协议, 例如 HTTP/ HTTPS
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $server_addr               │ 捕获 SERVER 配置块内, listen 配置项监听的地址
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $server_port               │ 捕获 SERVER 配置块内, listen 配置项监听的端口
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $server_name               │ 捕获 SERVER 配置块内, server_name 配置项的值
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $server_protocol           │ 捕获服务端响应的协议版本, 例如 HTTP/1.1
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $status                    │ 捕获服务端响应标头的状态代码
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $time_local                │ 按照通用格式 "日/月/年:小时:分钟:秒钟 时区" 打印时间戳
├────────────────────────────┼─────────────────────────────────────────────────────────────────────────────────────────
│ $time_iso8601              │ 按照 ISO8601 标准格式 "年-月-日T小时:分钟:秒钟 时区" 打印时间戳
└────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────

软件使用的日志通用格式如下
┌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┐
┊                                                                                                                     ┊
┊   '$remote_addr - $remote_user [$time_local] "$request_method $request_uri $server_protocol"'                       ┊
┊   '$status $body_bytes_sent "$http_referer" "$http_user_agent"';                                                    ┊
┊                                                                                                                     ┊
└╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┘

SERVER 配置块没有配置私有的日志文件时, 日志直接写入软件默认的访问日志文件与错误日志文件
SERVER 配置块允许使用 access_log/ error_log 配置项指定私有的日志文件:

    •  access_log 配置文件指定私有的访问日志文件
    •  error_log  配置文件指定私有的错误日志文件
    •  笔者建议把单个代理站点的访问日志与错误日志全部写入同一个站点日志文件, 这是一种比较方便调试的日志管理策略

{ access_log | error_log } /path/to/logfile;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ access_log | error_log } 配置项允许在 SERVER 配置块内使用, 以便特别指定访问日志文件与错误日志文件
{ access_log | error_log } 配置项用到的语法如下
**  access_log                                   访问日志配置项, 特别指定访问日志文件的位置
**  error_log                                    错误日志配置项, 特别指定错误日志文件的位置
**  /path/to/logfile                             日志文件参数, 指定日志文件的绝对路径

""""""""" 演示 NginX 软件的配置文件内, 日志管理办法
[root ~]# vim /etc/nginx/nginx.conf
http {
    ... ...
    ... ...
    map $time_iso8601 $fmtime {
        default $time_iso8601;
        '~^(?<ymd>\d{4}-\d{2}-\d{2})T(?<hms>\d{2}:\d{2}:\d{2}).*$' '$ymd $hms';
    }
    map $msec $fmsec {
        default '';
        '~^\d+\.(?<sec>\d{3})' '$sec';
    }
    log_format demo '$fmtime.$fmsec INFO $status $remote_addr:$remote_port $request_filename';
    log_format show '$fmtime.$fmsec INFO $status $remote_addr:$remote_port $server_name:$server_port$request_uri '
                    '$upstream_addr $upstream_response_time(s)';
}
[root ~]# vim /etc/nginx/http.d/foo.season.com.conf
server {
    ... ...
    ... ...
    access_log /var/log/nginx/foo.season.com.log demo;
    error_log  /var/log/nginx/foo.season.com.log;
}
--------------------------------------------------------------------------------------------------------------------- ✻



